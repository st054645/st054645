{"version":3,"file":"9970.e20056839880c78248fe.js","mappings":"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","sources":["webpack://telegram-t/./src/components/right/DeleteMemberModal.tsx","webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts","webpack://telegram-t/./src/global/selectors/calls.ts","webpack://telegram-t/./src/util/deeplink.ts"],"sourcesContent":["import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { selectCurrentChat, selectUser } from '../../global/selectors';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  contactName?: string;\n};\n\nconst DeleteMemberModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  userId,\n  contactName,\n  onClose,\n}) => {\n  const { deleteChatMember } = getActions();\n\n  const lang = useLang();\n\n  const handleDeleteChatMember = useCallback(() => {\n    deleteChatMember({ chatId: chat!.id, userId });\n    onClose();\n  }, [chat, deleteChatMember, onClose, userId]);\n\n  if (!chat || !userId) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeleteChatMember}\n      className=\"delete\"\n      title={lang('GroupRemoved.Remove')}\n    >\n      <p>{renderText(lang('PeerInfo.Confirm.RemovePeer', contactName))}</p>\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteChatMember}>\n        {lang('lng_box_remove')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const chat = selectCurrentChat(global);\n    const user = userId && selectUser(global, userId);\n    const contactName = user ? getUserFirstOrLastName(user) : undefined;\n\n    return {\n      chat,\n      contactName,\n    };\n  },\n)(DeleteMemberModal));\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat, ApiUser, ApiChatFolder } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport type { GlobalActions } from '../../types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TMP_CHAT_ID, ALL_FOLDER_ID, DEBUG,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats, addUsers, addUserStatuses, replaceThreadParam,\n  updateChatListIds, updateChats, updateChat, updateChatListSecondaryInfo,\n  updateManagementProgress, leaveChat, replaceUsers, replaceUserStatuses,\n  replaceChats, replaceChatListIds, addChatMembers,\n} from '../../reducers';\nimport {\n  selectChat, selectUser, selectChatListType, selectIsChatPinned,\n  selectChatFolder, selectSupportChat, selectChatByUsername, selectThreadTopMessageId,\n  selectCurrentMessageList, selectThreadInfo, selectCurrentChat, selectLastServiceNotification,\n  selectVisibleUsers, selectUserByPhoneNumber,\n} from '../../selectors';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, isChatBasicGroup, isUserBot,\n} from '../../helpers';\nimport { processDeepLink } from '../../../util/deeplink';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions) => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => id !== currentChatId && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const { id, threadId = MAIN_THREAD_ID } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  // Please telegram send us some updates about linked chat 🙏\n  if (chat?.lastMessage?.threadInfo) {\n    actions.requestThreadInfoUpdate({\n      chatId: chat.lastMessage.threadInfo.chatId,\n      threadId: chat.lastMessage.threadInfo.threadId,\n    });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload) => {\n  const { chatId, threadId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  actions.focusMessage({ chatId, threadId, messageId });\n});\n\naddActionHandler('openSupportChat', async (global, actions) => {\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload) => {\n  const listType = payload.listType as 'active' | 'archived';\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  while (shouldReplace || !getGlobal().chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => Boolean(chat?.lastMessage) && !selectIsChatPinned(global, chat.id))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n      : undefined;\n\n    await loadChats(listType, oldestChat?.id, oldestChat?.lastMessage!.date, shouldReplace);\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddActionHandler('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddActionHandler('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddActionHandler('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload) => {\n  const { chatId, userId }: { chatId: string; userId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload) => {\n  const { chatId }: { chatId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddActionHandler('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddActionHandler('editChatFolders', (global, actions, payload) => {\n  const { chatId, idsToRemove, idsToAdd } = payload!;\n\n  (idsToRemove as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  (idsToAdd as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds?.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddActionHandler('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload) => {\n  const { phoneNumber, startAttach, attach } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByPhoneNumber(phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat();\n    actions.showNotification({\n      message: langProvider.getTranslation('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id });\n\n  if (attach) {\n    openAttachMenuFromLink(actions, chat.id, attach, startAttach);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url.match(RE_TG_LINK)[0]);\n    return;\n  }\n\n  const uri = new URL(url.startsWith('http') ? url : `https://${url}`);\n  const [part1, part2, part3] = uri.pathname.split('/').filter(Boolean).map((l) => decodeURI(l));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    actions.openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    actions.openChatByInvite({ hash });\n    return;\n  }\n\n  if (part1 === 'addstickers') {\n    actions.openStickerSetShortName({\n      stickerSetShortName: part2,\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    actions.joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      actions.showNotification({ message: 'Chat does not exist' });\n      return;\n    }\n\n    actions.focusMessage({\n      chatId,\n      messageId,\n    });\n  } else {\n    actions.openChatByUsername({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload) => {\n  const { hash } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload) => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach,\n  } = payload!;\n\n  const chat = selectCurrentChat(global);\n\n  if (!commentId) {\n    if (chat && chat.username === username && !startAttach) {\n      actions.focusMessage({ chatId: chat.id, messageId });\n      return;\n    }\n    await openChatByUsername(actions, username, messageId, startParam, startAttach, attach);\n    return;\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n      });\n      return;\n    }\n  }\n\n  if (!messageId) return;\n\n  void openCommentsByUsername(actions, username, messageId, commentId);\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n\n  let chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await callApi('migrateChat', chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await callApi('migrateChat', chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const chatAfterUpdate = selectChat(global, chatId);\n\n  if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  setGlobal(updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(members && isBanned && {\n        members: members.filter((m) => m.userId !== userId),\n      }),\n      ...(members && !isBanned && {\n        members: members.map((m) => (\n          m.userId === userId\n            ? { ...m, bannedRights }\n            : m\n        )),\n      }),\n      ...(isUnblocked && kickedMembers && {\n        kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n      }),\n    },\n  }));\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await callApi('migrateChat', chat);\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembers } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n\n  global = getGlobal();\n\n  setGlobal(updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(adminMembers && isDismissed && {\n        adminMembers: adminMembers.filter((m) => m.userId !== userId),\n      }),\n      ...(adminMembers && !isDismissed && {\n        adminMembers: adminMembers.map((m) => (\n          m.userId === userId\n            ? { ...m, adminRights, customTitle }\n            : m\n        )),\n      }),\n    },\n  }));\n});\n\naddActionHandler('updateChat', async (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    chat.fullInfo && chat.fullInfo.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global) => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  setGlobal({\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  });\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await callApi('migrateChat', chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  let { fullInfo } = chat;\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    loadFullChat(chat);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload) => {\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddActionHandler('openChatWithText', (global, actions, payload) => {\n  const { chatId, text } = payload;\n\n  actions.openChat({ id: chatId });\n  actions.exitMessageSelectMode();\n\n  global = getGlobal();\n\n  return {\n    ...global,\n    openChatWithText: {\n      chatId,\n      text,\n    },\n  };\n});\n\naddActionHandler('resetOpenChatWithText', (global) => {\n  return {\n    ...global,\n    openChatWithText: undefined,\n  };\n});\n\naddActionHandler('loadMoreMembers', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = (chat.fullInfo?.members?.length) || undefined;\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter<ApiUser>(Boolean as any);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n  loadFullChat(chat);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  loadFullChat(chat);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload) => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload) => {\n  const { chatId, enabledReactions } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  void loadFullChat(chat);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const settings = await callApi('fetchChatSettings', chat);\n  if (!settings) return;\n\n  setGlobal(updateChat(getGlobal(), chat.id, { settings }));\n});\n\nasync function loadChats(\n  listType: 'active' | 'archived', offsetId?: string, offsetDate?: number, shouldReplace = false,\n) {\n  let global = getGlobal();\n\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage: selectLastServiceNotification(global)?.message,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  if (shouldReplace && listType === 'active') {\n    const currentChat = selectCurrentChat(global);\n    const visibleChats = currentChat ? [currentChat] : [];\n\n    const visibleUsers = selectVisibleUsers(global) || [];\n    if (global.currentUserId && global.users.byId[global.currentUserId]) {\n      visibleUsers.push(global.users.byId[global.currentUserId]);\n    }\n\n    global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else if (shouldReplace && listType === 'archived') {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, {\n    fullInfo,\n    ...(membersCount && { membersCount }),\n  });\n\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    getActions().loadStickers({\n      stickerSetId: stickerSet.id,\n      stickerSetAccessHash: stickerSet.accessHash,\n      stickerSetShortName: stickerSet.shortName,\n    });\n  }\n\n  return result;\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getActions().openChat({ id: channelId, shouldReplaceHistory: true });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    let global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = {\n      ...global,\n      chatCreation: {\n        ...global.chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    };\n    setGlobal(global);\n    getActions()\n      .openChat({\n        id: chatId,\n        shouldReplaceHistory: true,\n      });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      const global = getGlobal();\n      setGlobal({\n        ...global,\n        chatCreation: {\n          ...global.chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      });\n    }\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nexport async function fetchChatByUsername(\n  username: string,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber(phoneNumber: string) {\n  const global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const chat = await callApi('getChatByPhoneNumber', phoneNumber);\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  return chat;\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n) {\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const chat = await fetchChatByUsername(username);\n\n    if (!chat) return;\n    const global = getGlobal();\n    const user = selectUser(global, chat.id);\n\n    if (!user) return;\n    const isBot = isUserBot(user);\n    if (!isBot || !user.isAttachMenuBot) {\n      actions.showNotification({ message: langProvider.getTranslation('WebApp.AddToAttachmentUnavailableError') });\n      return;\n    }\n\n    const currentChat = selectCurrentChat(global);\n\n    if (!currentChat) return;\n\n    actions.callAttachMenuBot({\n      botId: user.id,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    });\n    return;\n  }\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) {\n    actions.openPreviousChat();\n    actions.showNotification({ message: 'User does not exist' });\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    openAttachMenuFromLink(actions, chat.id, attach, startAttach);\n  }\n}\n\nasync function openAttachMenuFromLink(\n  actions: GlobalActions,\n  chatId: string, attach: string, startAttach?: string | boolean,\n) {\n  const botChat = await fetchChatByUsername(attach);\n  if (!botChat) return;\n  const botUser = selectUser(getGlobal(), botChat.id);\n  if (!botUser || !botUser.isAttachMenuBot) {\n    actions.showNotification({ message: langProvider.getTranslation('WebApp.AddToAttachmentUnavailableError') });\n    return;\n  }\n\n  actions.callAttachMenuBot({\n    botId: botUser.id,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n  });\n}\n\nasync function openCommentsByUsername(\n  actions: GlobalActions,\n  username: string,\n  messageId: number,\n  commentId: number,\n) {\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) return;\n\n  const global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chat.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId: messageId });\n    if (!result) return;\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport type { ApiGroupCall } from '../../../api/types';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { addChats, addUsers } from '../../reducers';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\nimport type { CallSound } from '../../types';\n\n// Workaround for Safari not playing audio without user interaction\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\n\nlet sounds: Record<CallSound, HTMLAudioElement>;\nlet initializationPromise: Promise<void> | undefined = Promise.resolve();\n\nexport const initializeSoundsForSafari = () => {\n  if (!initializationPromise) return Promise.resolve();\n\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n\n  initializationPromise = Promise.all(Object.values(sounds).map((l) => {\n    l.muted = true;\n    l.volume = 0.0001;\n    return l.play().then(() => {\n      l.pause();\n      l.volume = 1;\n      l.currentTime = 0;\n      l.muted = false;\n    });\n  })).then(() => {\n    initializationPromise = undefined;\n  });\n\n  return initializationPromise;\n};\n\nasync function fetchGroupCall(groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  let global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants(groupCall: Partial<ApiGroupCall>, nextOffset?: string) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global) => {\n  return {\n    ...global,\n    isCallPanelVisible: !global.isCallPanelVisible,\n  };\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload) => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(groupCall);\n    await fetchGroupCallParticipants(groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload) => {\n  const { chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal(updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  }));\n\n  actions.joinGroupCall({ id: result.id, accessHash: result.accessHash });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions) => {\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const canInvite = Boolean(chat.username);\n\n  let { inviteLink } = chat.fullInfo!;\n  if (canInvite) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload) => {\n  const { username, inviteHash } = payload!;\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.getTranslation('NoUsernameFound') });\n    return;\n  }\n\n  const full = await loadFullChat(chat);\n\n  if (full?.groupCall) {\n    actions.joinGroupCall({ id: full.groupCall.id, accessHash: full.groupCall.accessHash, inviteHash });\n  }\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload) => {\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  const {\n    chatId, id, accessHash, inviteHash,\n  } = payload;\n\n  createAudioElement();\n\n  await initializeSoundsForSafari();\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  if (activeGroupCallId) {\n    actions.leaveGroupCall({\n      rejoin: payload,\n    });\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall({\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n    isCallPanelVisible: false,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload) => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  if (initializationPromise) {\n    initializationPromise.then(doPlay);\n  } else {\n    doPlay();\n  }\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global) => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestCall', async (global, actions, payload) => {\n  const { userId, isVideo } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  await initializeSoundsForSafari();\n\n  setGlobal({\n    ...getGlobal(),\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n    isCallPanelVisible: false,\n  });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): GlobalState {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter((l) => !l.isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n): GlobalState {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall(\n  global: GlobalState,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): GlobalState {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant(\n  global: GlobalState,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n) {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n","import type { GlobalState } from '../types';\nimport { selectChat } from './chats';\nimport { isChatBasicGroup } from '../helpers';\nimport { selectUser } from './users';\n\nexport function selectChatGroupCall(global: GlobalState, chatId: string) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.fullInfo || !chat.fullInfo.groupCallId) return undefined;\n\n  return selectGroupCall(global, chat.fullInfo.groupCallId);\n}\n\nexport function selectGroupCall(global: GlobalState, groupCallId: string) {\n  return global.groupCalls.byId[groupCallId];\n}\n\nexport function selectGroupCallParticipant(global: GlobalState, groupCallId: string, participantId: string) {\n  return selectGroupCall(global, groupCallId)?.participants[participantId];\n}\n\nexport function selectIsAdminInActiveGroupCall(global: GlobalState): boolean {\n  const chatId = selectActiveGroupCall(global)?.chatId;\n\n  if (!chatId) return false;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return false;\n\n  return (isChatBasicGroup(chat) && chat.isCreator) || Boolean(chat.adminRights?.manageCall);\n}\n\nexport function selectActiveGroupCall(global: GlobalState) {\n  const { groupCalls: { activeGroupCallId } } = global;\n  if (!activeGroupCallId) {\n    return undefined;\n  }\n\n  return selectGroupCall(global, activeGroupCallId);\n}\n\nexport function selectPhoneCallUser(global: GlobalState) {\n  const { phoneCall, currentUserId } = global;\n  if (!phoneCall || !phoneCall.participantId || !phoneCall.adminId) {\n    return undefined;\n  }\n\n  const id = phoneCall.adminId === currentUserId ? phoneCall.participantId : phoneCall.adminId;\n  return selectUser(global, id);\n}\n","import { getActions } from '../global';\nimport { IS_SAFARI } from './environment';\n\ntype DeepLinkMethod = 'resolve' | 'login' | 'passport' | 'settings' | 'join' | 'addstickers' | 'setlanguage' |\n'addtheme' | 'confirmphone' | 'socks' | 'proxy' | 'privatepost' | 'bg' | 'share' | 'msg' | 'msg_url';\n\nexport const processDeepLink = (url: string) => {\n  const {\n    protocol, searchParams, pathname, hostname,\n  } = new URL(url);\n\n  if (protocol !== 'tg:') return;\n\n  const {\n    openChatByInvite,\n    openChatByUsername,\n    openChatByPhoneNumber,\n    openStickerSetShortName,\n    focusMessage,\n    joinVoiceChatByLink,\n  } = getActions();\n\n  // Safari thinks the path in tg://path links is hostname for some reason\n  const method = (IS_SAFARI ? hostname : pathname).replace(/^\\/\\//, '') as DeepLinkMethod;\n  const params: Record<string, string> = {};\n  searchParams.forEach((value, key) => {\n    params[key] = value;\n  });\n\n  switch (method) {\n    case 'resolve': {\n      const {\n        domain, phone, post, comment, voicechat, livestream, start, startattach, attach,\n      } = params;\n\n      const startAttach = params.hasOwnProperty('startattach') && !startattach ? true : startattach;\n\n      if (domain !== 'telegrampassport') {\n        if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n          joinVoiceChatByLink({\n            username: domain,\n            inviteHash: voicechat || livestream,\n          });\n        } else if (phone) {\n          openChatByPhoneNumber({ phone, startAttach, attach });\n        } else {\n          openChatByUsername({\n            username: domain,\n            messageId: Number(post),\n            commentId: Number(comment),\n            startParam: start,\n            startAttach,\n            attach,\n          });\n        }\n      }\n      break;\n    }\n    case 'privatepost': {\n      const {\n        post, channel,\n      } = params;\n\n      focusMessage({\n        chatId: `-${channel}`,\n        id: post,\n      });\n      break;\n    }\n    case 'bg': {\n      // const {\n      //   slug, color, rotation, mode, intensity, bg_color: bgColor, gradient,\n      // } = params;\n      break;\n    }\n    case 'join': {\n      const { invite } = params;\n\n      openChatByInvite({ hash: invite });\n      break;\n    }\n    case 'addstickers': {\n      const { set } = params;\n\n      openStickerSetShortName({\n        stickerSetShortName: set,\n      });\n      break;\n    }\n    case 'share':\n    case 'msg': {\n      // const { url, text } = params;\n      break;\n    }\n    case 'login': {\n      // const { code, token } = params;\n      break;\n    }\n    default:\n      // Unsupported deeplink\n\n      break;\n  }\n};\n"],"names":["memo","withGlobal","global","userId","chat","selectCurrentChat","user","selectUser","contactName","getUserFirstOrLastName","undefined","isOpen","onClose","deleteChatMember","getActions","lang","useLang","handleDeleteChatMember","useCallback","chatId","id","onEnter","className","title","renderText","color","isText","onClick","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetId","offsetDate","shouldReplace","getGlobal","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","serverTimeOffset","lastLocalServiceMessage","selectLastServiceNotification","message","chatIds","length","shift","currentChat","visibleChats","visibleUsers","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","chats","replaceChatListIds","addUsers","addUserStatuses","updateChats","updateChatListIds","updateChatListSecondaryInfo","Object","keys","draftsById","forEach","replaceThreadParam","MAIN_THREAD_ID","replyingToById","isFullyLoaded","setGlobal","loadFullChat","fullInfo","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","stickerSet","loadStickers","stickerSetId","stickerSetAccessHash","accessHash","stickerSetShortName","shortName","fetchChatByUsername","username","localChat","selectChatByUsername","isMin","openAttachMenuFromLink","actions","attach","startAttach","botChat","botUser","isAttachMenuBot","callAttachMenuBot","botId","startParam","showNotification","langProvider","addActionHandler","preloadedChatIds","Set","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatId","selectCurrentMessageList","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","has","add","loadViewportMessages","threadId","payload","selectChat","hasUnreadMark","toggleChatUnread","lastMessage","threadInfo","requestThreadInfoUpdate","isChatSummaryOnly","requestChatUpdate","type","selectThreadTopMessageId","chatFullInfo","linkedChatId","openChat","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","TMP_CHAT_ID","onReplace","DEBUG","console","error","connectionState","authState","listIds","oldestChat","map","filter","Boolean","selectIsChatPinned","sort","chat1","chat2","date","force","SERVICE_NOTIFICATIONS_USER_ID","lastLocalMessage","isMuted","about","photo","memberIds","chatCreation","progress","ChatCreationProgress","createdChannel","channelId","createChannel","leaveChat","createdChat","e","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","idsToRemove","idsToAdd","includedId","emoticon","orderedIds","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","apply","deleteChatFolder","unreadCount","hash","phoneNumber","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","openPreviousChat","replace","url","match","RE_TG_LINK","processDeepLink","uri","URL","startsWith","part1","part2","part3","pathname","split","l","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","openChatByPhoneNumber","substr","openChatByInvite","openStickerSetShortName","chatOrChannelPostId","Number","commentId","comment","joinVoiceChatByLink","inviteHash","voicechat","livestream","openChatByUsername","start","channelPostId","isUserBot","startBot","param","usernameChat","selectThreadInfo","discussionChatId","openCommentsByUsername","isEnabled","isChatBasicGroup","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","activeChatFolder","text","exitMessageSelectMode","openChatWithText","offset","addChatMembers","setNewChatMembersDialogState","NewChatMembersProgress","isProtected","enabledReactions","settings","audioElement","audioContext","sounds","initializationPromise","resolve","initializeSoundsForSafari","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","values","muted","volume","play","then","currentTime","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","isCallPanelVisible","subscribed","peer","joinGroupCall","selectActiveGroupCall","canInvite","inviteLink","canSelfUnmute","copyTextToClipboard","full","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","window","AudioContext","webkitAudioContext","srcObject","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","silence","safePlay","createAudioElement","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","sound","doPlay","isVideo","state","participantId","adminId","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","acc","el","removeGroupCall","toString","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount","selectGroupCallParticipant","selectIsAdminInActiveGroupCall","isCreator","manageCall","selectPhoneCallUser","protocol","hostname","method","IS_SAFARI","value","key","domain","phone","post","invite","set"],"sourceRoot":""}