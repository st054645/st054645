{"version":3,"file":"458.dc4ead3c1408ed5b2061.chunk.js","mappings":"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","sources":["webpack://tweb/./src/components/inputField.ts","webpack://tweb/./src/helpers/dom/selectElementContents.ts","webpack://tweb/./src/components/singleTransition.ts","webpack://tweb/./src/helpers/dom/documentFragmentToHTML.ts","webpack://tweb/./src/helpers/dom/findUpAttribute.ts","webpack://tweb/./src/helpers/dom/getRichElementValue.ts","webpack://tweb/./src/helpers/dom/getRichValue.ts","webpack://tweb/./src/helpers/dom/isInputEmpty.ts","webpack://tweb/./src/helpers/dom/replaceContent.ts","webpack://tweb/./src/helpers/dom/setInnerHTML.ts","webpack://tweb/./src/lib/richTextProcessor/combineSameEntities.ts","webpack://tweb/./src/lib/richTextProcessor/findConflictingEntity.ts","webpack://tweb/./src/lib/richTextProcessor/mergeEntities.ts","webpack://tweb/./src/lib/richTextProcessor/sortEntities.ts","webpack://tweb/./src/lib/richTextProcessor/wrapDraftText.ts"],"sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport simulateEvent from \"../helpers/dom/dispatchEvent\";\r\nimport documentFragmentToHTML from \"../helpers/dom/documentFragmentToHTML\";\r\nimport findUpAttribute from \"../helpers/dom/findUpAttribute\";\r\nimport getRichValue from \"../helpers/dom/getRichValue\";\r\nimport isInputEmpty from \"../helpers/dom/isInputEmpty\";\r\nimport selectElementContents from \"../helpers/dom/selectElementContents\";\r\nimport setInnerHTML from \"../helpers/dom/setInnerHTML\";\r\nimport { MessageEntity } from \"../layer\";\r\nimport { i18n, LangPackKey, _i18n } from \"../lib/langPack\";\r\nimport mergeEntities from \"../lib/richTextProcessor/mergeEntities\";\r\nimport parseEntities from \"../lib/richTextProcessor/parseEntities\";\r\nimport wrapDraftText from \"../lib/richTextProcessor/wrapDraftText\";\r\nimport SetTransition from \"./singleTransition\";\r\n\r\nlet init = () => {\r\n  document.addEventListener('paste', (e) => {\r\n    if(!findUpAttribute(e.target, 'contenteditable=\"true\"')) {\r\n      return;\r\n    }\r\n\r\n    e.preventDefault();\r\n    let text: string, entities: MessageEntity[];\r\n\r\n    // @ts-ignore\r\n    let plainText: string = (e.originalEvent || e).clipboardData.getData('text/plain');\r\n    let usePlainText = true;\r\n\r\n    // @ts-ignore\r\n    let html: string = (e.originalEvent || e).clipboardData.getData('text/html');\r\n    if(html.trim()) {\r\n      html = html.replace(/<style([\\s\\S]*)<\\/style>/, '');\r\n      html = html.replace(/<!--([\\s\\S]*)-->/, '');\r\n\r\n      const match = html.match(/<body>([\\s\\S]*)<\\/body>/);\r\n      if(match) {\r\n        html = match[1].trim();\r\n      }\r\n\r\n      let span: HTMLElement = document.createElement('span');\r\n      span.innerHTML = html;\r\n\r\n      let curChild = span.firstChild;\r\n      while(curChild) { // * fix whitespace between elements like <p>asd</p>\\n<p>zxc</p>\r\n        let nextSibling = curChild.nextSibling;\r\n        if(curChild.nodeType === 3) {\r\n          if(!curChild.nodeValue.trim()) {\r\n            curChild.remove();\r\n          }\r\n        }\r\n\r\n        curChild = nextSibling;\r\n      }\r\n\r\n      const richValue = getRichValue(span, true);\r\n      if(richValue.value.replace(/\\s/g, '').length === plainText.replace(/\\s/g, '').length) {\r\n        text = richValue.value;\r\n        entities = richValue.entities;\r\n        usePlainText = false;\r\n  \r\n        let entities2 = parseEntities(text);\r\n        entities2 = entities2.filter((e) => e._ === 'messageEntityEmoji' || e._ === 'messageEntityLinebreak');\r\n        mergeEntities(entities, entities2);\r\n      }\r\n    }\r\n    \r\n    if(usePlainText) {\r\n      text = plainText;\r\n      entities = parseEntities(text);\r\n      entities = entities.filter((e) => e._ === 'messageEntityEmoji' || e._ === 'messageEntityLinebreak');\r\n    }\r\n\r\n    const fragment = wrapDraftText(text, {entities});\r\n    text = documentFragmentToHTML(fragment);\r\n    \r\n    window.document.execCommand('insertHTML', false, text);\r\n  });\r\n\r\n  init = null;\r\n};\r\n\r\n// ! it doesn't respect symbols other than strongs\r\n/* const checkAndSetRTL = (input: HTMLElement) => {\r\n  //const isEmpty = isInputEmpty(input);\r\n  //console.log('input', isEmpty);\r\n\r\n  //const char = [...getRichValue(input)][0];\r\n  const char = (input instanceof HTMLInputElement ? input.value : input.innerText)[0];\r\n  let direction = 'ltr';\r\n  if(char && checkRTL(char)) {\r\n    direction = 'rtl';\r\n  }\r\n\r\n  //console.log('RTL', direction, char);\r\n\r\n  input.style.direction = direction;\r\n}; */\r\n\r\nexport enum InputState {\r\n  Neutral = 0,\r\n  Valid = 1,\r\n  Error = 2\r\n};\r\n\r\nexport type InputFieldOptions = {\r\n  placeholder?: LangPackKey, \r\n  label?: LangPackKey, \r\n  labelOptions?: any[],\r\n  labelText?: string | DocumentFragment,\r\n  name?: string, \r\n  maxLength?: number, \r\n  showLengthOn?: number,\r\n  plainText?: true,\r\n  animate?: boolean,\r\n  required?: boolean,\r\n  canBeEdited?: boolean,\r\n  validate?: () => boolean\r\n};\r\n\r\nclass InputField {\r\n  public container: HTMLElement;\r\n  public input: HTMLElement;\r\n  public inputFake: HTMLElement;\r\n  public label: HTMLLabelElement;\r\n\r\n  public originalValue: string;\r\n\r\n  public required: boolean;\r\n  public validate: () => boolean;\r\n\r\n  //public onLengthChange: (length: number, isOverflow: boolean) => void;\r\n  // protected wasInputFakeClientHeight: number;\r\n  // protected showScrollDebounced: () => void;\r\n\r\n  constructor(public options: InputFieldOptions = {}) {\r\n    this.container = document.createElement('div');\r\n    this.container.classList.add('input-field');\r\n\r\n    this.required = options.required;\r\n    this.validate = options.validate;\r\n\r\n    if(options.maxLength !== undefined && options.showLengthOn === undefined) {\r\n      options.showLengthOn = Math.min(40, Math.round(options.maxLength / 3));\r\n    }\r\n\r\n    const {placeholder, maxLength, showLengthOn, name, plainText, canBeEdited = true} = options;\r\n\r\n    let label = options.label || options.labelText;\r\n\r\n    let input: HTMLElement;\r\n    if(!plainText) {\r\n      if(init) {\r\n        init();\r\n      }\r\n\r\n      this.container.innerHTML = `\r\n      <div contenteditable=\"${String(!!canBeEdited)}\" class=\"input-field-input\"></div>\r\n      `;\r\n\r\n      input = this.container.firstElementChild as HTMLElement;\r\n      const observer = new MutationObserver(() => {\r\n        //checkAndSetRTL(input);\r\n\r\n        if(processInput) {\r\n          processInput();\r\n        }\r\n      });\r\n\r\n      // * because if delete all characters there will br left\r\n      input.addEventListener('input', () => {\r\n        if(isInputEmpty(input)) {\r\n          input.innerHTML = '';\r\n        }\r\n\r\n        if(this.inputFake) {\r\n          this.inputFake.innerHTML = input.innerHTML;\r\n          this.onFakeInput();\r\n        }\r\n      });\r\n      \r\n      // ! childList for paste first symbol\r\n      observer.observe(input, {characterData: true, childList: true, subtree: true});\r\n\r\n      if(options.animate) {\r\n        input.classList.add('scrollable', 'scrollable-y');\r\n        // this.wasInputFakeClientHeight = 0;\r\n        // this.showScrollDebounced = debounce(() => this.input.classList.remove('no-scrollbar'), 150, false, true);\r\n        this.inputFake = document.createElement('div');\r\n        this.inputFake.setAttribute('contenteditable', 'true');\r\n        this.inputFake.className = input.className + ' input-field-input-fake';\r\n      }\r\n    } else {\r\n      this.container.innerHTML = `\r\n      <input type=\"text\" ${name ? `name=\"${name}\"` : ''} autocomplete=\"off\" ${label ? 'required=\"\"' : ''} class=\"input-field-input\">\r\n      `;\r\n\r\n      input = this.container.firstElementChild as HTMLElement;\r\n      //input.addEventListener('input', () => checkAndSetRTL(input));\r\n    }\r\n\r\n    input.setAttribute('dir', 'auto');\r\n\r\n    if(placeholder) {\r\n      _i18n(input, placeholder, undefined, 'placeholder');\r\n\r\n      if(this.inputFake) {\r\n        _i18n(this.inputFake, placeholder, undefined, 'placeholder');\r\n      }\r\n    }\r\n\r\n    if(label || placeholder) {\r\n      const border = document.createElement('div');\r\n      border.classList.add('input-field-border');\r\n      this.container.append(border);\r\n    }\r\n\r\n    if(label) {\r\n      this.label = document.createElement('label');\r\n      this.setLabel();\r\n      this.container.append(this.label);\r\n    }\r\n\r\n    let processInput: () => void;\r\n    if(maxLength) {\r\n      const labelEl = this.container.lastElementChild as HTMLLabelElement;\r\n      let showingLength = false;\r\n\r\n      processInput = () => {\r\n        const wasError = input.classList.contains('error');\r\n        // * https://stackoverflow.com/a/54369605 #2 to count emoji as 1 symbol\r\n        const inputLength = plainText ? (input as HTMLInputElement).value.length : [...getRichValue(input, false).value].length;\r\n        const diff = maxLength - inputLength;\r\n        const isError = diff < 0;\r\n        input.classList.toggle('error', isError);\r\n\r\n        //this.onLengthChange && this.onLengthChange(inputLength, isError);\r\n\r\n        if(isError || diff <= showLengthOn) {\r\n          this.setLabel();\r\n          labelEl.append(` (${maxLength - inputLength})`);\r\n          if(!showingLength) showingLength = true;\r\n        } else if((wasError && !isError) || showingLength) {\r\n          this.setLabel();\r\n          showingLength = false;\r\n        }\r\n      };\r\n\r\n      input.addEventListener('input', processInput);\r\n    }\r\n\r\n    this.input = input;\r\n  }\r\n\r\n  public select() {\r\n    if(!this.value) { // * avoid selecting whole empty field on iOS devices\r\n      return;\r\n    }\r\n\r\n    if(this.options.plainText) {\r\n      (this.input as HTMLInputElement).select(); // * select text\r\n    } else {\r\n      selectElementContents(this.input);\r\n    }\r\n  }\r\n\r\n  public setLabel() {\r\n    this.label.textContent = '';\r\n    if(this.options.labelText) {\r\n      setInnerHTML(this.label, this.options.labelText);\r\n    } else {\r\n      this.label.append(i18n(this.options.label, this.options.labelOptions));\r\n    }\r\n  }\r\n\r\n  public onFakeInput(setHeight = true) {\r\n    const {scrollHeight: newHeight/* , clientHeight */} = this.inputFake;\r\n    /* if(this.wasInputFakeClientHeight && this.wasInputFakeClientHeight !== clientHeight) {\r\n      this.input.classList.add('no-scrollbar'); // ! в сафари может вообще не появиться скролл после анимации, так как ему нужен полный reflow блока с overflow.\r\n      this.showScrollDebounced();\r\n    } */\r\n\r\n    const currentHeight = +this.input.style.height.replace('px', '');\r\n    if(currentHeight === newHeight) {\r\n      return;\r\n    }\r\n\r\n    const TRANSITION_DURATION_FACTOR = 50;\r\n    const transitionDuration = Math.round(\r\n      TRANSITION_DURATION_FACTOR * Math.log(Math.abs(newHeight - currentHeight)),\r\n    );\r\n\r\n    // this.wasInputFakeClientHeight = clientHeight;\r\n    this.input.style.transitionDuration = `${transitionDuration}ms`;\r\n\r\n    if(setHeight) {\r\n      this.input.style.height = newHeight ? newHeight + 'px' : '';\r\n    }\r\n\r\n    const className = 'is-changing-height';\r\n    SetTransition(this.input, className, true, transitionDuration, () => {\r\n      this.input.classList.remove(className);\r\n    });\r\n  }\r\n\r\n  get value() {\r\n    return this.options.plainText ? (this.input as HTMLInputElement).value : getRichValue(this.input, false).value;\r\n    //return getRichValue(this.input);\r\n  }\r\n\r\n  set value(value: string) {\r\n    this.setValueSilently(value, false);\r\n\r\n    simulateEvent(this.input, 'input');\r\n  }\r\n\r\n  public setValueSilently(value: string, fireFakeInput = true) {\r\n    if(this.options.plainText) {\r\n      (this.input as HTMLInputElement).value = value;\r\n    } else {\r\n      this.input.innerHTML = value;\r\n      \r\n      if(this.inputFake) {\r\n        this.inputFake.innerHTML = value;\r\n\r\n        if(fireFakeInput) {\r\n          this.onFakeInput();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public isChanged() {\r\n    return this.value !== this.originalValue;\r\n  }\r\n\r\n  public isValid() {\r\n    return !this.input.classList.contains('error') && \r\n      (!this.validate || this.validate()) && \r\n      (!this.required || !isInputEmpty(this.input));\r\n  }\r\n\r\n  public isValidToChange() {\r\n    return this.isValid() && this.isChanged();\r\n  }\r\n\r\n  public setDraftValue(value = '', silent = false) {\r\n    if(!this.options.plainText) {\r\n      value = documentFragmentToHTML(wrapDraftText(value));\r\n    }\r\n\r\n    if(silent) {\r\n      this.setValueSilently(value, false); \r\n    } else {\r\n      this.value = value;\r\n    }\r\n  }\r\n\r\n  public setOriginalValue(value: InputField['originalValue'] = '', silent = false) {\r\n    this.originalValue = value;\r\n    this.setDraftValue(value, silent);\r\n  }\r\n\r\n  public setState(state: InputState, label?: LangPackKey) {\r\n    if(label) {\r\n      this.label.textContent = '';\r\n      this.label.append(i18n(label, this.options.labelOptions));\r\n    }\r\n\r\n    this.input.classList.toggle('error', !!(state & InputState.Error));\r\n    this.input.classList.toggle('valid', !!(state & InputState.Valid));\r\n  }\r\n\r\n  public setError(label?: LangPackKey) {\r\n    this.setState(InputState.Error, label);\r\n  }\r\n}\r\n\r\nexport default InputField;\r\n","// https://stackoverflow.com/a/6150060\r\nexport default function selectElementContents(el: HTMLElement) {\r\n  const range = document.createRange();\r\n  range.selectNodeContents(el);\r\n  const sel = window.getSelection();\r\n  sel.removeAllRanges();\r\n  sel.addRange(range);\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport rootScope from \"../lib/rootScope\";\r\n\r\nconst SetTransition = (\r\n  element: HTMLElement, \r\n  className: string, \r\n  forwards: boolean, \r\n  duration: number, \r\n  onTransitionEnd?: () => void, \r\n  useRafs?: number\r\n) => {\r\n  const {timeout, raf} = element.dataset;\r\n  if(timeout !== undefined) {\r\n    clearTimeout(+timeout);\r\n  }\r\n\r\n  if(raf !== undefined) {\r\n    window.cancelAnimationFrame(+raf);\r\n    if(!useRafs) {\r\n      delete element.dataset.raf;\r\n    }\r\n  }\r\n\r\n  // if(forwards && className && element.classList.contains(className) && !element.classList.contains('animating')) {\r\n  //   return;\r\n  // }\r\n\r\n  if(useRafs && rootScope.settings.animationsEnabled && duration) {\r\n    element.dataset.raf = '' + window.requestAnimationFrame(() => {\r\n      delete element.dataset.raf;\r\n      SetTransition(element, className, forwards, duration, onTransitionEnd, useRafs - 1);\r\n    });\r\n\r\n    return;\r\n  }\r\n\r\n  if(forwards && className) {\r\n    element.classList.add(className);\r\n  }\r\n\r\n  const afterTimeout = () => {\r\n    delete element.dataset.timeout;\r\n    if(!forwards && className) {\r\n      element.classList.remove('backwards', className);\r\n    }\r\n\r\n    element.classList.remove('animating');\r\n    \r\n    onTransitionEnd && onTransitionEnd();\r\n  };\r\n\r\n  if(!rootScope.settings.animationsEnabled || !duration) {\r\n    element.classList.remove('animating', 'backwards');\r\n    afterTimeout();\r\n    return;\r\n  }\r\n\r\n  element.classList.add('animating');\r\n\r\n  element.classList.toggle('backwards', !forwards);\r\n  element.dataset.timeout = '' + setTimeout(afterTimeout, duration);\r\n};\r\n\r\nexport default SetTransition;\r\n","import encodeEntities from \"../string/encodeEntities\";\r\n\r\nexport default function documentFragmentToHTML(fragment: DocumentFragment) {\r\n  return Array.from(fragment.childNodes).map((node) => {\r\n    return node.nodeType === 3 ? encodeEntities(node.textContent) : (node as Element).outerHTML;\r\n  }).join('');\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function findUpAttribute(el: any, attribute: string): HTMLElement {\r\n  return el.closest(`[${attribute}]`);\r\n  /* if(el.getAttribute(attribute) !== null) return el; // 03.02.2020\r\n\r\n  while(el.parentElement) {\r\n    el = el.parentElement;\r\n    if(el.getAttribute(attribute) !== null) \r\n      return el;\r\n  }\r\n  return null; */\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { MessageEntity } from \"../../layer\";\r\n\r\nexport type MarkdownType = 'bold' | 'italic' | 'underline' | 'strikethrough' | 'monospace' | 'link' | 'mentionName' | 'spoiler';\r\nexport type MarkdownTag = {\r\n  match: string,\r\n  entityName: Extract<MessageEntity['_'], 'messageEntityBold' | 'messageEntityUnderline' | 'messageEntityItalic' | 'messageEntityCode' | 'messageEntityStrike' | 'messageEntityTextUrl' | 'messageEntityMentionName' | 'messageEntitySpoiler'>;\r\n};\r\n\r\n// https://core.telegram.org/bots/api#html-style\r\nexport const markdownTags: {[type in MarkdownType]: MarkdownTag} = {\r\n  bold: {\r\n    match: '[style*=\"bold\"], [style*=\"font-weight: 700\"], [style*=\"font-weight: 600\"], [style*=\"font-weight:700\"], [style*=\"font-weight:600\"], b, strong',\r\n    entityName: 'messageEntityBold'\r\n  },\r\n  underline: {\r\n    match: '[style*=\"underline\"], u, ins',\r\n    entityName: 'messageEntityUnderline'\r\n  },\r\n  italic: {\r\n    match: '[style*=\"italic\"], i, em',\r\n    entityName: 'messageEntityItalic'\r\n  },\r\n  monospace: {\r\n    match: '[style*=\"monospace\"], [face*=\"monospace\"], pre',\r\n    entityName: 'messageEntityCode'\r\n  },\r\n  strikethrough: {\r\n    match: '[style*=\"line-through\"], strike, del, s',\r\n    entityName: 'messageEntityStrike'\r\n  },\r\n  link: {\r\n    match: 'A:not(.follow)',\r\n    entityName: 'messageEntityTextUrl'\r\n  },\r\n  mentionName: {\r\n    match: 'A.follow',\r\n    entityName: 'messageEntityMentionName'\r\n  },\r\n  spoiler: {\r\n    match: '[style*=\"spoiler\"]',\r\n    entityName: 'messageEntitySpoiler'\r\n  }\r\n};\r\n\r\nconst tabulationMatch = '[style*=\"table-cell\"], th, td';\r\n\r\n/* export function getDepth(child: Node, container?: Node) {\r\n  let depth = 0;\r\n\r\n  do {\r\n    if(child === container) {\r\n      return depth;\r\n    }\r\n\r\n    ++depth;\r\n  } while((child = child.parentNode) !== null);\r\n\r\n  return depth;\r\n} */\r\n\r\nconst BLOCK_TAG_NAMES = new Set([\r\n  'DIV',\r\n  'P',\r\n  'BR',\r\n  'LI',\r\n  'SECTION',\r\n  'H6',\r\n  'H5',\r\n  'H4',\r\n  'H3',\r\n  'H2',\r\n  'H1',\r\n  'TR'\r\n]);\r\n\r\nexport default function getRichElementValue(node: HTMLElement, lines: string[], line: string[], selNode?: Node, selOffset?: number, entities?: MessageEntity[], offset = {offset: 0}) {\r\n  if(node.nodeType === 3) { // TEXT\r\n    let nodeValue = node.nodeValue;\r\n\r\n    /* const tabulation = node.parentElement?.closest(tabulationMatch + ', [contenteditable]');\r\n    if(tabulation?.getAttribute('contenteditable') === null) {\r\n      nodeValue += ' ';\r\n      // line.push('\\t');\r\n      // ++offset.offset;\r\n    } */\r\n\r\n    if(selNode === node) {\r\n      line.push(nodeValue.substr(0, selOffset) + '\\x01' + nodeValue.substr(selOffset));\r\n    } else {\r\n      line.push(nodeValue);\r\n    }\r\n\r\n    if(entities && nodeValue.length) {\r\n      if(node.parentNode) {\r\n        const parentElement = node.parentElement;\r\n        \r\n        // let closestTag: MarkdownTag, closestElementByTag: Element, closestDepth = Infinity;\r\n        for(const type in markdownTags) {\r\n          const tag = markdownTags[type as MarkdownType];\r\n          const closest = parentElement.closest(tag.match + ', [contenteditable]');\r\n          if(closest?.getAttribute('contenteditable') !== null) {\r\n            /* const depth = getDepth(closest, parentElement.closest('[contenteditable]'));\r\n            if(closestDepth > depth) {\r\n              closestDepth = depth;\r\n              closestTag = tag;\r\n              closestElementByTag = closest;\r\n            } */\r\n            continue;\r\n          }\r\n\r\n          if(tag.entityName === 'messageEntityTextUrl') {\r\n            entities.push({\r\n              _: tag.entityName,\r\n              url: (closest as HTMLAnchorElement).href,\r\n              offset: offset.offset,\r\n              length: nodeValue.length\r\n            });\r\n          } else if(tag.entityName === 'messageEntityMentionName') {\r\n            entities.push({\r\n              _: tag.entityName,\r\n              offset: offset.offset,\r\n              length: nodeValue.length,\r\n              user_id: (closest as HTMLElement).dataset.follow.toUserId()\r\n            });\r\n          } else {\r\n            entities.push({\r\n              _: tag.entityName,\r\n              offset: offset.offset,\r\n              length: nodeValue.length\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    offset.offset += nodeValue.length;\r\n    return;\r\n  }\r\n\r\n  if(node.nodeType !== 1) { // NON-ELEMENT\r\n    return;\r\n  }\r\n\r\n  const isSelected = selNode === node;\r\n  const isBlock = BLOCK_TAG_NAMES.has(node.tagName);\r\n  if(isBlock && line.length) {\r\n    lines.push(line.join(''));\r\n    line.splice(0, line.length);\r\n    ++offset.offset;\r\n  } else if(node instanceof HTMLImageElement) {\r\n    const alt = node.alt;\r\n    if(alt) {\r\n      line.push(alt);\r\n      offset.offset += alt.length;\r\n    }\r\n  }\r\n\r\n  if(isSelected && !selOffset) {\r\n    line.push('\\x01');\r\n  }\r\n\r\n  const isTableCell = node.matches(tabulationMatch);\r\n  const wasEntitiesLength = entities?.length;\r\n\r\n  let curChild = node.firstChild as HTMLElement;\r\n  while(curChild) {\r\n    getRichElementValue(curChild, lines, line, selNode, selOffset, entities, offset);\r\n    curChild = curChild.nextSibling as any;\r\n  }\r\n\r\n  if(isSelected && selOffset) {\r\n    line.push('\\x01');\r\n  }\r\n\r\n  if(isTableCell && node.nextSibling) {\r\n    line.push(' ');\r\n    ++offset.offset;\r\n\r\n    // * combine entities such as url after adding space\r\n    if(wasEntitiesLength !== undefined) {\r\n      for(let i = wasEntitiesLength, length = entities.length; i < length; ++i) {\r\n        ++entities[i].length;\r\n      }\r\n    }\r\n  }\r\n\r\n  const wasLength = line.length;\r\n  if(isBlock && wasLength) {\r\n    lines.push(line.join(''));\r\n    line.splice(0, wasLength);\r\n    ++offset.offset;\r\n  }\r\n\r\n  if(wasLength && node.tagName === 'P' && node.nextSibling) {\r\n    lines.push('');\r\n    ++offset.offset;\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { MessageEntity } from \"../../layer\";\r\nimport combineSameEntities from \"../../lib/richTextProcessor/combineSameEntities\";\r\nimport sortEntities from \"../../lib/richTextProcessor/sortEntities\";\r\nimport getRichElementValue from \"./getRichElementValue\";\r\n\r\nexport default function getRichValue(field: HTMLElement, withEntities = true) {\r\n  const lines: string[] = [];\r\n  const line: string[] = [];\r\n\r\n  const entities: MessageEntity[] = withEntities ? [] : undefined;\r\n  getRichElementValue(field, lines, line, undefined, undefined, entities);\r\n  if(line.length) {\r\n    lines.push(line.join(''));\r\n  }\r\n\r\n  let value = lines.join('\\n');\r\n  value = value.replace(/\\u00A0/g, ' ');\r\n\r\n  if(entities?.length) {\r\n    // ! cannot do that here because have the same check before the sending in RichTextProcessor.parseMarkdown\r\n    /* const entity = entities[entities.length - 1];\r\n    const length = value.length;\r\n    const trimmedLength = value.trimRight().length;\r\n    if(length !== trimmedLength) {\r\n      entity.length -= length - trimmedLength;\r\n    } */\r\n\r\n    combineSameEntities(entities);\r\n    sortEntities(entities);\r\n  }\r\n\r\n  //console.log('getRichValue:', value, entities);\r\n\r\n  return {value, entities};\r\n}\r\n\r\nMOUNT_CLASS_TO.getRichValue = getRichValue;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport getRichValue from \"./getRichValue\";\r\n\r\nexport default function isInputEmpty(element: HTMLElement) {\r\n  if(element.hasAttribute('contenteditable') || element.tagName !== 'INPUT') {\r\n    /* const value = element.innerText;\r\n\r\n    return !value.trim() && !serializeNodes(Array.from(element.childNodes)).trim(); */\r\n    return !getRichValue(element, false).value.trim();\r\n  } else {\r\n    return !(element as HTMLInputElement).value.trim();\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function replaceContent(elem: HTMLElement, node: string | Node) {\r\n  if(typeof(node) === 'string') {\r\n    elem.innerHTML = node;\r\n    return;\r\n  }\r\n\r\n  // * children.length doesn't count text nodes\r\n  const firstChild = elem.firstChild;\r\n  if(firstChild) {\r\n    if(elem.lastChild === firstChild) {\r\n      firstChild.replaceWith(node);\r\n    } else {\r\n      elem.textContent = '';\r\n      elem.append(node);\r\n    }\r\n  } else {\r\n    elem.append(node);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function setInnerHTML(elem: Element, html: string | DocumentFragment) {\r\n  elem.setAttribute('dir', 'auto');\r\n  if(typeof(html) === 'string') {\r\n    if(!html) elem.textContent = '';\r\n    else elem.innerHTML = html;\r\n  } else {\r\n    elem.textContent = '';\r\n    elem.append(html);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { MessageEntity } from \"../../layer\";\r\n\r\nconst CAN_COMBINE_ENTITIES: Set<MessageEntity['_']> = new Set([\r\n  'messageEntityBold',\r\n  'messageEntityItalic',\r\n  'messageEntityCode',\r\n  'messageEntityPre',\r\n  'messageEntityUnderline',\r\n  'messageEntityStrike',\r\n  'messageEntityBlockquote',\r\n  'messageEntitySpoiler'\r\n]);\r\nexport default function combineSameEntities(entities: MessageEntity[]) {\r\n  //entities = entities.slice();\r\n  for(let i = 0; i < entities.length; ++i) {\r\n    const entity = entities[i];\r\n\r\n    let nextEntityIdx = -1;\r\n    do {\r\n      nextEntityIdx = entities.findIndex((e, _i) => {\r\n        return CAN_COMBINE_ENTITIES.has(e._) && _i !== i && e._ === entity._ && (e.offset - entity.length) === entity.offset;\r\n      });\r\n\r\n      if(nextEntityIdx !== -1) {\r\n        const nextEntity = entities[nextEntityIdx];\r\n        entity.length += nextEntity.length;\r\n        entities.splice(nextEntityIdx, 1);\r\n      }\r\n    } while(nextEntityIdx !== -1);\r\n  }\r\n  //return entities;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { PASS_CONFLICTING_ENTITIES } from \".\";\r\nimport { MessageEntity } from \"../../layer\";\r\n\r\nconst SINGLE_ENTITIES: Set<MessageEntity['_']> = new Set(['messageEntityPre', 'messageEntityCode']);\r\n\r\nexport default function findConflictingEntity(currentEntities: MessageEntity[], newEntity: MessageEntity) {\r\n  let singleEnd = -1;\r\n  return currentEntities.find((currentEntity) => {\r\n    if(SINGLE_ENTITIES.has(currentEntity._)) {\r\n      singleEnd = currentEntity.offset + currentEntity.length;\r\n    }\r\n\r\n    if(newEntity.offset < singleEnd && !PASS_CONFLICTING_ENTITIES.has(newEntity._)) {\r\n      return true;\r\n    }\r\n    \r\n    const isConflictingTypes = newEntity._ === currentEntity._ || \r\n    (!PASS_CONFLICTING_ENTITIES.has(newEntity._) && !PASS_CONFLICTING_ENTITIES.has(currentEntity._));\r\n    \r\n    if(!isConflictingTypes) {\r\n      return false;\r\n    }\r\n\r\n    const isConflictingOffset = newEntity.offset >= currentEntity.offset && \r\n      (newEntity.length + newEntity.offset) <= (currentEntity.length + currentEntity.offset);\r\n\r\n    return isConflictingOffset;\r\n  });\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { MessageEntity } from \"../../layer\";\r\nimport findConflictingEntity from \"./findConflictingEntity\";\r\nimport sortEntities from \"./sortEntities\";\r\n\r\nexport default function mergeEntities(currentEntities: MessageEntity[], newEntities: MessageEntity[]) {\r\n  const filtered = newEntities.filter((e) => {\r\n    return !findConflictingEntity(currentEntities, e);\r\n  });\r\n\r\n  currentEntities.push(...filtered);\r\n  sortEntities(currentEntities);\r\n  // currentEntities.sort((a, b) => a.offset - b.offset);\r\n  // currentEntities.sort((a, b) => (a.offset - b.offset) || (a._ === 'messageEntityCaret' && -1));\r\n\r\n  // * fix splitted emoji. messageEntityTextUrl can split the emoji if starts before its end (e.g. on fe0f)\r\n  // * have to fix even if emoji supported since it's being wrapped in span\r\n  // if(!IS_EMOJI_SUPPORTED) {\r\n    for(let i = 0; i < currentEntities.length; ++i) {\r\n      const entity = currentEntities[i];\r\n      if(entity._ === 'messageEntityEmoji') {\r\n        const nextEntity = currentEntities[i + 1];\r\n        if(nextEntity /* && nextEntity._ !== 'messageEntityCaret' */ && nextEntity.offset < (entity.offset + entity.length)) {\r\n          entity.length = nextEntity.offset - entity.offset;\r\n        }\r\n      }\r\n    }\r\n  // }\r\n\r\n  return currentEntities;\r\n}\r\n","import { MessageEntity } from \"../../layer\";\r\n\r\nexport default function sortEntities(entities: MessageEntity[]) {\r\n  entities.sort((a, b) => {\r\n    return (a.offset - b.offset) || (b.length - a.length);\r\n  });\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { MessageEntity } from \"../../layer\";\r\nimport wrapRichText from \"./wrapRichText\";\r\n\r\nexport default function wrapDraftText(text: string, options: Partial<{\r\n  entities: MessageEntity[]\r\n}> = {}) {\r\n  if(!text) {\r\n    return wrapRichText('');\r\n  }\r\n\r\n  return wrapRichText(text, {\r\n    entities: options.entities, \r\n    noLinks: true,\r\n    wrappingDraft: true,\r\n    passEntities: {\r\n      messageEntityTextUrl: true,\r\n      messageEntityMentionName: true\r\n    }\r\n  });\r\n}\r\n"],"names":["init","document","addEventListener","e","findUpAttribute","target","text","entities","preventDefault","plainText","originalEvent","clipboardData","getData","usePlainText","html","trim","replace","match","span","createElement","innerHTML","curChild","firstChild","nextSibling","nodeType","nodeValue","remove","richValue","getRichValue","value","length","entities2","parseEntities","filter","_","mergeEntities","fragment","wrapDraftText","documentFragmentToHTML","window","execCommand","InputState","constructor","options","this","container","classList","add","required","validate","undefined","maxLength","showLengthOn","Math","min","round","placeholder","name","canBeEdited","input","processInput","label","labelText","firstElementChild","String","observer","MutationObserver","isInputEmpty","inputFake","onFakeInput","observe","characterData","childList","subtree","animate","setAttribute","className","border","append","setLabel","labelEl","lastElementChild","showingLength","wasError","contains","inputLength","diff","isError","toggle","select","el","range","createRange","selectNodeContents","sel","getSelection","removeAllRanges","addRange","selectElementContents","textContent","setInnerHTML","labelOptions","setHeight","scrollHeight","newHeight","currentHeight","style","height","transitionDuration","log","abs","setValueSilently","fireFakeInput","isChanged","originalValue","isValid","isValidToChange","setDraftValue","silent","setOriginalValue","setState","state","Error","Valid","setError","SetTransition","element","forwards","duration","onTransitionEnd","useRafs","timeout","raf","dataset","clearTimeout","cancelAnimationFrame","requestAnimationFrame","afterTimeout","setTimeout","Array","from","childNodes","map","node","outerHTML","join","attribute","closest","markdownTags","bold","entityName","underline","italic","monospace","strikethrough","link","mentionName","spoiler","BLOCK_TAG_NAMES","Set","getRichElementValue","lines","line","selNode","selOffset","offset","push","substr","parentNode","parentElement","type","tag","getAttribute","url","href","user_id","follow","toUserId","isSelected","isBlock","has","tagName","splice","HTMLImageElement","alt","isTableCell","matches","wasEntitiesLength","i","wasLength","field","withEntities","hasAttribute","replaceContent","elem","lastChild","replaceWith","CAN_COMBINE_ENTITIES","combineSameEntities","entity","nextEntityIdx","findIndex","_i","nextEntity","SINGLE_ENTITIES","findConflictingEntity","currentEntities","newEntity","singleEnd","find","currentEntity","newEntities","filtered","sortEntities","sort","a","b","noLinks","wrappingDraft","passEntities","messageEntityTextUrl","messageEntityMentionName"],"sourceRoot":""}