{"version":3,"file":"crypto.worker.a7e83fbaf0aec5a5874c.chunk.js","mappings":"uBAAIA,ECEIC,EACAC,EACAC,EACAC,ECLJC,E,0ECQG,MAAMC,EAAaC,UAAYA,UAAUC,UAAY,KAU/CC,GATWF,UAAUC,UAAUE,OAAO,yBACzBH,UAAUC,UAAUG,cAAcC,QAAQ,WACzC,SAASC,KAAKN,UAAUC,YAAc,aAAaK,KAAKN,UAAUO,SAG7D,mBAAmBD,KAAKN,UAAUQ,WACxC,aAAvBR,UAAUQ,UAA2BR,UAAUS,eAAiB,IAC/D,gBAEwB,oBAAuBV,KAAe,yBAAyBO,KAAKP,IAAkBA,EAAWW,MAAM,YAAcX,EAAWW,MAAM,aACrJC,EAAaX,UAAUC,UAAUG,cAAcC,QAAQ,YAAc,EAIbL,UAAUS,eAAiB,GAAKT,UAAUC,UAAUE,OAAO,mH,6CCrBzH,SAASS,EAAgBC,EAA8BC,EAAO,KACnE,OAAO,cAAiBD,aAAiBE,WAAa,IAAIF,GAASA,EAAOC,GAGrE,SAASE,EAAcC,GAC5B,OAAO,IAAIF,WAAWE,EAAOC,QAAQ,KAAKC,OCL7B,SAASC,EAAYP,EAA8BQ,EAA4BC,GAC5F,MAAMC,EAAcX,EAAgBC,GAC9BW,EAAYZ,EAAgBS,GAC5BI,EAAYb,EAAgBU,GAElC,OAAON,EADWO,EAAYG,OAAOF,EAAWC,I,0CCGlD,SAASE,EAAsBd,GAC7B,MAAMe,EAASf,EAAMe,OACfC,EAAgB,EAATD,EACb,IAAIT,EAAQ,IAAON,EAAM,IAAIiB,IAAI,KAAMC,UAAUF,EAAO,GACxD,IAAI,IAAIG,EAAI,EAAGA,EAAIJ,IAAUI,EAAG,CAC9B,MAAMC,EAAQJ,EAAiB,GAATG,EAAI,GACpBE,EAAI,IAAOrB,EAAMmB,IACvBb,EAAQA,EAAMgB,GAAGF,EAAQC,EAAEH,UAAUE,GAASC,GAGhD,OAAOf,EAIT,MAAMiB,EAAS,CACb,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,OAAQ,OAAQ,QAAS,QAAS,QAAS,QACpD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,OAAQ,OAAQ,OAAQ,OAC5D,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,OAAQ,QAAS,QAAS,QAAS,QACrD,QAAS,OAAQ,OAAQ,OAAQ,QAAS,QAAS,QACnD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,OAAQ,QAAS,QACrD,QAAS,QAAS,OAAQ,QAAS,QAAS,OAAQ,OACpD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OACtD,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,QACrD,QAAS,QAAS,QAAS,OAAQ,QAAS,QAAS,QACrD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACtD,QAAS,QAAS,OAAQ,QAAS,OAAQ,QAAS,QACpD,QAAS,QAAS,QAAS,OAAQ,QAAS,QAAS,QACrD,OAA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","sources":["webpack://tweb/webpack/runtime/chunk loaded","webpack://tweb/webpack/runtime/compat","webpack://tweb/webpack/runtime/startup chunk dependencies","webpack://tweb/./src/environment/userAgent.ts","webpack://tweb/./src/helpers/bigInt/bigIntConversion.ts","webpack://tweb/./src/helpers/bytes/bytesModPow.ts","webpack://tweb/./src/lib/calls/helpers/getEmojisFingerprint.ts","webpack://tweb/./src/helpers/array/randomize.ts","webpack://tweb/./src/helpers/bytes/addPadding.ts","webpack://tweb/./src/helpers/bytes/bytesFromHex.ts","webpack://tweb/./src/helpers/bytes/convertToUint8Array.ts","webpack://tweb/./node_modules/@cryptography/aes/dist/es/aes.js","webpack://tweb/./src/helpers/bytes/bytesToWordss.ts","webpack://tweb/./src/lib/crypto/utils/aesIGE.ts","webpack://tweb/./src/helpers/bytes/bytesFromWordss.ts","webpack://tweb/./src/helpers/random.ts","webpack://tweb/./src/helpers/bigInt/bigIntRandom.ts","webpack://tweb/./src/lib/crypto/utils/factorize/BrentPollard.ts","webpack://tweb/./src/lib/crypto/subtle.ts","webpack://tweb/./src/lib/crypto/utils/aesCTR.ts","webpack://tweb/./src/lib/crypto/aesCtrUtils.ts","webpack://tweb/./src/lib/crypto/crypto.worker.ts","webpack://tweb/./src/lib/crypto/utils/sha1.ts","webpack://tweb/./src/lib/crypto/utils/sha256.ts","webpack://tweb/./src/lib/crypto/utils/pbkdf2.ts","webpack://tweb/./src/lib/crypto/utils/rsa.ts","webpack://tweb/./src/helpers/gzipUncompress.ts","webpack://tweb/./src/lib/crypto/srp.ts","webpack://tweb/./src/helpers/bytes/bytesToHex.ts","webpack://tweb/./src/helpers/bytes/bytesXor.ts","webpack://tweb/./src/lib/crypto/generateDh.ts","webpack://tweb/./src/lib/crypto/computeDhKey.ts","webpack://tweb/./src/helpers/listenMessagePort.ts","webpack://tweb/./src/lib/logger.ts","webpack://tweb/webpack/bootstrap","webpack://tweb/webpack/runtime/compat get default export","webpack://tweb/webpack/runtime/define property getters","webpack://tweb/webpack/runtime/ensure chunk","webpack://tweb/webpack/runtime/get javascript chunk filename","webpack://tweb/webpack/runtime/get mini-css chunk filename","webpack://tweb/webpack/runtime/global","webpack://tweb/webpack/runtime/hasOwnProperty shorthand","webpack://tweb/webpack/runtime/node module decorator","webpack://tweb/webpack/runtime/publicPath","webpack://tweb/webpack/runtime/importScripts chunk loading","webpack://tweb/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","(() => {\n  if (typeof __webpack_require__ !== 'undefined') {\n    var oldGetScript = __webpack_require__.u;\n    var oldLoadScript = __webpack_require__.e;\n    var queryMap = new Map();\n    var countMap = new Map();\n    __webpack_require__.u = function (chunkId) {\n      var result = oldGetScript(chunkId);\n      return (\n        result + (queryMap.has(chunkId) ? '?' + queryMap.get(chunkId) : '')\n      );\n    };\n    __webpack_require__.e = function (chunkId) {\n      var result = oldLoadScript(chunkId);\n      return result.catch(function (error) {\n        var retries = countMap.has(chunkId) ? countMap.get(chunkId) : 999999;\n        if (retries < 1) {\n          var realSrc = oldGetScript(chunkId);\n          error.message =\n            'Loading chunk ' +\n            chunkId +\n            ' failed after 999999 retries.\\n(' +\n            realSrc +\n            ')';\n          error.request = realSrc;\n          throw error;\n        }\n        return new Promise(function (resolve) {\n          setTimeout(function () {\n            var retryAttempt = 999999 - retries + 1;\n            var retryAttemptString = '&retry-attempt=' + retryAttempt;\n            var cacheBust = (function () {\n              return Date.now();\n            })();\n            +retryAttemptString;\n            queryMap.set(chunkId, cacheBust);\n            countMap.set(chunkId, retries - 1);\n            resolve(__webpack_require__.e(chunkId));\n          }, 3000);\n        });\n      });\n    };\n  }\n})();\n","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([699,211,960].map(__webpack_require__.e, __webpack_require__)).then(next);\n};","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport ctx from './ctx';\r\n\r\nexport const USER_AGENT = navigator ? navigator.userAgent : null;\r\nexport const IS_APPLE = navigator.userAgent.search(/OS X|iPhone|iPad|iOS/i) !== -1;\r\nexport const IS_ANDROID = navigator.userAgent.toLowerCase().indexOf('android') !== -1;\r\nexport const IS_CHROMIUM = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);\r\n\r\n// https://stackoverflow.com/a/58065241\r\nexport const IS_APPLE_MOBILE = (/iPad|iPhone|iPod/.test(navigator.platform) ||\r\n  (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1)) &&\r\n  !(ctx as any).MSStream;\r\n\r\nexport const IS_SAFARI = !!('safari' in ctx) || !!(USER_AGENT && (/\\b(iPad|iPhone|iPod)\\b/.test(USER_AGENT) || (!!USER_AGENT.match('Safari') && !USER_AGENT.match('Chrome'))))/*  || true */;\r\nexport const IS_FIREFOX = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\r\n\r\nexport const IS_MOBILE_SAFARI = IS_SAFARI && IS_APPLE_MOBILE;\r\n\r\nexport const IS_MOBILE = /* screen.width && screen.width < 480 ||  */navigator.maxTouchPoints > 0 && navigator.userAgent.search(/iOS|iPhone OS|Android|BlackBerry|BB10|Series ?[64]0|J2ME|MIDP|opera mini|opera mobi|mobi.+Gecko|Windows Phone/i) != -1;\r\n","import bigInt from 'big-integer';\r\n\r\nexport function bigIntFromBytes(bytes: Uint8Array | number[], base = 256) {\r\n  return bigInt.fromArray(bytes instanceof Uint8Array ? [...bytes] : bytes, base);\r\n}\r\n\r\nexport function bigIntToBytes(bigInt: bigInt.BigInteger) {\r\n  return new Uint8Array(bigInt.toArray(256).value);\r\n}\r\n","import { bigIntFromBytes, bigIntToBytes } from '../bigInt/bigIntConversion';\r\n\r\nexport default function bytesModPow(bytes: number[] | Uint8Array, exp: number[] | Uint8Array, mod: number[] | Uint8Array) {\r\n  const bytesBigInt = bigIntFromBytes(bytes);\r\n  const expBigInt = bigIntFromBytes(exp);\r\n  const modBigInt = bigIntFromBytes(mod);\r\n  const resBigInt = bytesBigInt.modPow(expBigInt, modBigInt);\r\n  return bigIntToBytes(resBigInt);\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport cryptoWorker from '../../crypto/cryptoMessagePort';\r\nimport bigInt from 'big-integer';\r\n\r\nfunction readBigIntFromBytesBE(bytes: Uint8Array) {\r\n  const length = bytes.length;\r\n  const bits = length * 8;\r\n  let value = bigInt(bytes[0]).and(0x7F).shiftLeft(bits - 8);\r\n  for(let i = 1; i < length; ++i) {\r\n    const _bits = bits - (i + 1) * 8;\r\n    const b = bigInt(bytes[i]);\r\n    value = value.or(_bits ? b.shiftLeft(_bits) : b);\r\n  }\r\n  \r\n  return value;\r\n}\r\n\r\n// Emojis were taken from tdlib\r\nconst emojis = [\r\n  '1f609', '1f60d', '1f61b', '1f62d', '1f631', '1f621', '1f60e',\r\n  '1f634', '1f635', '1f608', '1f62c', '1f607', '1f60f', '1f46e',\r\n  '1f477', '1f482', '1f476', '1f468', '1f469', '1f474', '1f475',\r\n  '1f63b', '1f63d', '1f640', '1f47a', '1f648', '1f649', '1f64a',\r\n  '1f480', '1f47d', '1f4a9', '1f525', '1f4a5', '1f4a4', '1f442',\r\n  '1f440', '1f443', '1f445', '1f444', '1f44d', '1f44e', '1f44c',\r\n  '1f44a', '270c', '270b', '1f450', '1f446', '1f447', '1f449',\r\n  '1f448', '1f64f', '1f44f', '1f4aa', '1f6b6', '1f3c3', '1f483',\r\n  '1f46b', '1f46a', '1f46c', '1f46d', '1f485', '1f3a9', '1f451',\r\n  '1f452', '1f45f', '1f45e', '1f460', '1f455', '1f457', '1f456',\r\n  '1f459', '1f45c', '1f453', '1f380', '1f484', '1f49b', '1f499',\r\n  '1f49c', '1f49a', '1f48d', '1f48e', '1f436', '1f43a', '1f431',\r\n  '1f42d', '1f439', '1f430', '1f438', '1f42f', '1f428', '1f43b',\r\n  '1f437', '1f42e', '1f417', '1f434', '1f411', '1f418', '1f43c',\r\n  '1f427', '1f425', '1f414', '1f40d', '1f422', '1f41b', '1f41d',\r\n  '1f41c', '1f41e', '1f40c', '1f419', '1f41a', '1f41f', '1f42c',\r\n  '1f40b', '1f410', '1f40a', '1f42b', '1f340', '1f339', '1f33b',\r\n  '1f341', '1f33e', '1f344', '1f335', '1f334', '1f333', '1f31e',\r\n  '1f31a', '1f319', '1f30e', '1f30b', '26a1', '2614', '2744', '26c4',\r\n  '1f300', '1f308', '1f30a', '1f393', '1f386', '1f383', '1f47b',\r\n  '1f385', '1f384', '1f381', '1f388', '1f52e', '1f3a5', '1f4f7',\r\n  '1f4bf', '1f4bb', '260e', '1f4e1', '1f4fa', '1f4fb', '1f509',\r\n  '1f514', '23f3', '23f0', '231a', '1f512', '1f511', '1f50e',\r\n  '1f4a1', '1f526', '1f50c', '1f50b', '1f6bf', '1f6bd', '1f527',\r\n  '1f528', '1f6aa', '1f6ac', '1f4a3', '1f52b', '1f52a', '1f48a',\r\n  '1f489', '1f4b0', '1f4b5', '1f4b3', '2709', '1f4eb', '1f4e6',\r\n  '1f4c5', '1f4c1', '2702', '1f4cc', '1f4ce', '2712', '270f',\r\n  '1f4d0', '1f4da', '1f52c', '1f52d', '1f3a8', '1f3ac', '1f3a4',\r\n  '1f3a7', '1f3b5', '1f3b9', '1f3bb', '1f3ba', '1f3b8', '1f47e',\r\n  '1f3ae', '1f0cf', '1f3b2', '1f3af', '1f3c8', '1f3c0', '26bd',\r\n  '26be', '1f3be', '1f3b1', '1f3c9', '1f3b3', '1f3c1', '1f3c7',\r\n  '1f3c6', '1f3ca', '1f3c4', '2615', '1f37c', '1f37a', '1f377',\r\n  '1f374', '1f355', '1f354', '1f35f', '1f357', '1f371', '1f35a',\r\n  '1f35c', '1f361', '1f373', '1f35e', '1f369', '1f366', '1f382',\r\n  '1f370', '1f36a', '1f36b', '1f36d', '1f36f', '1f34e', '1f34f',\r\n  '1f34a', '1f34b', '1f352', '1f347', '1f349', '1f353', '1f351',\r\n  '1f34c', '1f350', '1f34d', '1f346', '1f345', '1f33d', '1f3e1',\r\n  '1f3e5', '1f3e6', '26ea', '1f3f0', '26fa', '1f3ed', '1f5fb',\r\n  '1f5fd', '1f3a0', '1f3a1', '26f2', '1f3a2', '1f6a2', '1f6a4',\r\n  '2693', '1f680', '2708', '1f681', '1f682', '1f68b', '1f68e',\r\n  '1f68c', '1f699', '1f697', '1f695', '1f69b', '1f6a8', '1f694',\r\n  '1f692', '1f691', '1f6b2', '1f6a0', '1f69c', '1f6a6', '26a0',\r\n  '1f6a7', '26fd', '1f3b0', '1f5ff', '1f3aa', '1f3ad',\r\n  '1f1ef-1f1f5', '1f1f0-1f1f7', '1f1e9-1f1ea', '1f1e8-1f1f3',\r\n  '1f1fa-1f1f8', '1f1eb-1f1f7', '1f1ea-1f1f8', '1f1ee-1f1f9',\r\n  '1f1f7-1f1fa', '1f1ec-1f1e7', '0031-20e3', '0032-20e3', '0033-20e3',\r\n  '0034-20e3', '0035-20e3', '0036-20e3', '0037-20e3', '0038-20e3', '0039-20e3',\r\n  '0030-20e3', '1f51f', '2757', '2753', '2665', '2666', '1f4af', '1f517',\r\n  '1f531', '1f534', '1f535', '1f536', '1f537'\r\n];\r\n\r\nexport default async function getEmojisFingerprint(key: Uint8Array, g_a: Uint8Array) {\r\n  const arr = key.concat(g_a);\r\n  const hash = await cryptoWorker.invokeCrypto('sha256', arr);\r\n\r\n  const result: [string, string, string, string] = [] as any;\r\n  const emojisLength = emojis.length;\r\n\r\n  const kPartSize = 8;\r\n  for(let partOffset = 0; partOffset != hash.length; partOffset += kPartSize) {\r\n    const bytes = hash.slice(partOffset, partOffset + kPartSize);\r\n    const value = readBigIntFromBytesBE(bytes);\r\n    const index = value.mod(emojisLength).toJSNumber();\r\n\r\n    // const emoji = emojiFromCodePoints(emojis[index]);\r\n    const codePoints = emojis[index];\r\n    result.push(codePoints);\r\n  }\r\n\r\n  return result;\r\n}\r\n","export default function randomize<T extends ArrayBufferView>(arr: T) {\r\n  if(crypto && 'getRandomValues' in crypto) {\r\n    crypto.getRandomValues(arr);\r\n  } else {\r\n    throw new Error('NO_SECURE_RANDOM');\r\n  }\r\n  \r\n  return arr;\r\n}\r\n","import randomize from \"../array/randomize\";\r\nimport bufferConcats from \"./bufferConcats\";\r\n\r\nexport default function addPadding<T extends number[] | ArrayBuffer | Uint8Array>(\r\n  bytes: T, \r\n  blockSize: number = 16, \r\n  zeroes?: boolean, \r\n  blockSizeAsTotalLength = false, \r\n  prepend = false\r\n): T {\r\n  const len = (bytes as ArrayBuffer).byteLength || (bytes as Uint8Array).length;\r\n  const needPadding = blockSizeAsTotalLength ? blockSize - len : blockSize - (len % blockSize);\r\n  if(needPadding > 0 && needPadding < blockSize) {\r\n    ////console.log('addPadding()', len, blockSize, needPadding);\r\n    const padding = new Uint8Array(needPadding);\r\n    if(zeroes) {\r\n      for(let i = 0; i < needPadding; ++i) {\r\n        padding[i] = 0;\r\n      }\r\n    } else {\r\n      randomize(padding);\r\n    }\r\n\r\n    if(bytes instanceof ArrayBuffer) {\r\n      return (prepend ? bufferConcats(padding, bytes) : bufferConcats(bytes, padding)).buffer as T;\r\n    } else if(bytes instanceof Uint8Array) {\r\n      return (prepend ? bufferConcats(padding, bytes) : bufferConcats(bytes, padding)) as T;\r\n    } else {\r\n      // @ts-ignore\r\n      return (prepend ? [...padding].concat(bytes) : bytes.concat([...padding])) as T;\r\n    }\r\n  }\r\n\r\n  return bytes;\r\n}\r\n","export default function bytesFromHex(hexString: string) {\r\n  const len = hexString.length;\r\n  const bytes = new Uint8Array(Math.ceil(len / 2));\r\n  let start = 0;\r\n\r\n  if(len % 2) { // read 0x581 as 0x0581\r\n    bytes[start++] = parseInt(hexString.charAt(0), 16);\r\n  }\r\n\r\n  for(let i = start; i < len; i += 2) {\r\n    bytes[start++] = parseInt(hexString.substr(i, 2), 16);\r\n  }\r\n\r\n  return bytes;\r\n}\r\n","export default function convertToUint8Array(bytes: Uint8Array | ArrayBuffer | number[] | string): Uint8Array {\r\n  if(bytes instanceof Uint8Array) {\r\n    return bytes;\r\n  } else if(typeof(bytes) === 'string') {\r\n    return new TextEncoder().encode(bytes);\r\n  }\r\n\r\n  return new Uint8Array(bytes);\r\n}\r\n","var S = new Uint8Array(256);\nvar Si = new Uint8Array(256);\nvar T1 = new Uint32Array(256);\nvar T2 = new Uint32Array(256);\nvar T3 = new Uint32Array(256);\nvar T4 = new Uint32Array(256);\nvar T5 = new Uint32Array(256);\nvar T6 = new Uint32Array(256);\nvar T7 = new Uint32Array(256);\nvar T8 = new Uint32Array(256);\nfunction computeTables() {\n    var d = new Uint8Array(256);\n    var t = new Uint8Array(256);\n    var x2;\n    var x4;\n    var x8;\n    var s;\n    var tEnc;\n    var tDec;\n    var x = 0;\n    var xInv = 0;\n    // Compute double and third tables\n    for (var i = 0; i < 256; i++) {\n        d[i] = i << 1 ^ (i >> 7) * 283;\n        t[d[i] ^ i] = i;\n    }\n    for (; !S[x]; x ^= x2 || 1) {\n        // Compute sbox\n        s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n        s = s >> 8 ^ s & 255 ^ 99;\n        S[x] = s;\n        Si[s] = x;\n        // Compute MixColumns\n        x8 = d[x4 = d[x2 = d[x]]];\n        tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n        tEnc = d[s] * 0x101 ^ s * 0x1010100;\n        T1[x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n        T2[x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n        T3[x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n        T4[x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n        T5[s] = tDec = tDec << 24 ^ tDec >>> 8;\n        T6[s] = tDec = tDec << 24 ^ tDec >>> 8;\n        T7[s] = tDec = tDec << 24 ^ tDec >>> 8;\n        T8[s] = tDec = tDec << 24 ^ tDec >>> 8;\n        xInv = t[xInv] || 1;\n    }\n}\n\n/**\n * Gets a uint32 from string in big-endian order order\n */\nfunction s2i(str, pos) {\n    return (str.charCodeAt(pos) << 24\n        ^ str.charCodeAt(pos + 1) << 16\n        ^ str.charCodeAt(pos + 2) << 8\n        ^ str.charCodeAt(pos + 3));\n}\n\n/* eslint-disable import/prefer-default-export */\n/**\n * Helper function for transforming string key to Uint32Array\n */\nfunction getWords(key) {\n    if (key instanceof Uint32Array) {\n        return key;\n    }\n    if (typeof key === 'string') {\n        if (key.length % 4 !== 0)\n            for (var i = key.length % 4; i <= 4; i++)\n                key += '\\0x00';\n        var buf = new Uint32Array(key.length / 4);\n        for (var i = 0; i < key.length; i += 4)\n            buf[i / 4] = s2i(key, i);\n        return buf;\n    }\n    if (key instanceof Uint8Array) {\n        var buf = new Uint32Array(key.length / 4);\n        for (var i = 0; i < key.length; i += 4) {\n            buf[i / 4] = (key[i] << 24\n                ^ key[i + 1] << 16\n                ^ key[i + 2] << 8\n                ^ key[i + 3]);\n        }\n        return buf;\n    }\n    throw new Error('Unable to create 32-bit words');\n}\nfunction xor(left, right, to) {\n    if (to === void 0) { to = left; }\n    for (var i = 0; i < left.length; i++)\n        to[i] = left[i] ^ right[i];\n}\n\ncomputeTables();\n/**\n * Low-level AES Cipher\n */\nvar AES = /** @class */ (function () {\n    function AES(_key) {\n        var key = getWords(_key);\n        if (key.length !== 4 && key.length !== 6 && key.length !== 8) {\n            throw new Error('Invalid key size');\n        }\n        this.encKey = new Uint32Array(4 * key.length + 28);\n        this.decKey = new Uint32Array(4 * key.length + 28);\n        this.encKey.set(key);\n        var rcon = 1;\n        var i = key.length;\n        var tmp;\n        // schedule encryption keys\n        for (; i < 4 * key.length + 28; i++) {\n            tmp = this.encKey[i - 1];\n            // apply sbox\n            if (i % key.length === 0 || (key.length === 8 && i % key.length === 4)) {\n                tmp = S[tmp >>> 24] << 24 ^ S[(tmp >> 16) & 255] << 16 ^ S[(tmp >> 8) & 255] << 8 ^ S[tmp & 255];\n                // shift rows and add rcon\n                if (i % key.length === 0) {\n                    tmp = tmp << 8 ^ tmp >>> 24 ^ (rcon << 24);\n                    rcon = rcon << 1 ^ (rcon >> 7) * 283;\n                }\n            }\n            this.encKey[i] = this.encKey[i - key.length] ^ tmp;\n        }\n        // schedule decryption keys\n        for (var j = 0; i; j++, i--) {\n            tmp = this.encKey[j & 3 ? i : i - 4];\n            if (i <= 4 || j < 4) {\n                this.decKey[j] = tmp;\n            }\n            else {\n                this.decKey[j] = (T5[S[tmp >>> 24]]\n                    ^ T6[S[(tmp >> 16) & 255]]\n                    ^ T7[S[(tmp >> 8) & 255]]\n                    ^ T8[S[tmp & 255]]);\n            }\n        }\n    }\n    AES.prototype.encrypt = function (_message) {\n        var message = getWords(_message);\n        var out = new Uint32Array(4);\n        var a = message[0] ^ this.encKey[0];\n        var b = message[1] ^ this.encKey[1];\n        var c = message[2] ^ this.encKey[2];\n        var d = message[3] ^ this.encKey[3];\n        var rounds = this.encKey.length / 4 - 2;\n        var k = 4;\n        var a2;\n        var b2;\n        var c2;\n        // Inner rounds.  Cribbed from OpenSSL.\n        for (var i = 0; i < rounds; i++) {\n            a2 = T1[a >>> 24] ^ T2[(b >> 16) & 255] ^ T3[(c >> 8) & 255] ^ T4[d & 255] ^ this.encKey[k];\n            b2 = T1[b >>> 24] ^ T2[(c >> 16) & 255] ^ T3[(d >> 8) & 255] ^ T4[a & 255] ^ this.encKey[k + 1];\n            c2 = T1[c >>> 24] ^ T2[(d >> 16) & 255] ^ T3[(a >> 8) & 255] ^ T4[b & 255] ^ this.encKey[k + 2];\n            d = T1[d >>> 24] ^ T2[(a >> 16) & 255] ^ T3[(b >> 8) & 255] ^ T4[c & 255] ^ this.encKey[k + 3];\n            a = a2;\n            b = b2;\n            c = c2;\n            k += 4;\n            // console.log(a, b, c, d);\n        }\n        // Last round.\n        for (var i = 0; i < 4; i++) {\n            out[i] = (S[a >>> 24] << 24\n                ^ S[(b >> 16) & 255] << 16\n                ^ S[(c >> 8) & 255] << 8\n                ^ S[d & 255]\n                ^ this.encKey[k++]);\n            a2 = a;\n            a = b;\n            b = c;\n            c = d;\n            d = a2;\n        }\n        return out;\n    };\n    AES.prototype.decrypt = function (_message) {\n        var message = getWords(_message);\n        var out = new Uint32Array(4);\n        var a = message[0] ^ this.decKey[0];\n        var b = message[3] ^ this.decKey[1];\n        var c = message[2] ^ this.decKey[2];\n        var d = message[1] ^ this.decKey[3];\n        var rounds = this.decKey.length / 4 - 2;\n        var a2;\n        var b2;\n        var c2;\n        var k = 4;\n        // Inner rounds.  Cribbed from OpenSSL.\n        for (var i = 0; i < rounds; i++) {\n            a2 = T5[a >>> 24] ^ T6[(b >> 16) & 255] ^ T7[(c >> 8) & 255] ^ T8[d & 255] ^ this.decKey[k];\n            b2 = T5[b >>> 24] ^ T6[(c >> 16) & 255] ^ T7[(d >> 8) & 255] ^ T8[a & 255] ^ this.decKey[k + 1];\n            c2 = T5[c >>> 24] ^ T6[(d >> 16) & 255] ^ T7[(a >> 8) & 255] ^ T8[b & 255] ^ this.decKey[k + 2];\n            d = T5[d >>> 24] ^ T6[(a >> 16) & 255] ^ T7[(b >> 8) & 255] ^ T8[c & 255] ^ this.decKey[k + 3];\n            a = a2;\n            b = b2;\n            c = c2;\n            k += 4;\n        }\n        // Last round.\n        for (var i = 0; i < 4; i++) {\n            out[3 & -i] = (Si[a >>> 24] << 24\n                ^ Si[(b >> 16) & 255] << 16\n                ^ Si[(c >> 8) & 255] << 8\n                ^ Si[d & 255]\n                ^ this.decKey[k++]);\n            a2 = a;\n            a = b;\n            b = c;\n            c = d;\n            d = a2;\n        }\n        return out;\n    };\n    return AES;\n}());\n\n/**\n * AES-IGE mode.\n */\nvar AES_IGE = /** @class */ (function () {\n    function AES_IGE(key, iv, blockSize) {\n        if (blockSize === void 0) { blockSize = 16; }\n        this.key = getWords(key);\n        this.iv = getWords(iv);\n        this.cipher = new AES(key);\n        this.blockSize = blockSize / 4;\n    }\n    /**\n     * Encrypts plain text with AES-IGE mode.\n     */\n    AES_IGE.prototype.encrypt = function (message, buf) {\n        var text = getWords(message);\n        var cipherText = buf || new Uint32Array(text.length);\n        var prevX = this.iv.subarray(this.blockSize, this.iv.length);\n        var prevY = this.iv.subarray(0, this.blockSize);\n        var yXOR = new Uint32Array(this.blockSize);\n        for (var i = 0; i < text.length; i += this.blockSize) {\n            var x = text.subarray(i, i + this.blockSize);\n            xor(x, prevY, yXOR);\n            var y = this.cipher.encrypt(yXOR);\n            xor(y, prevX);\n            prevX = x;\n            prevY = y;\n            for (var j = i, k = 0; j < text.length && k < 4; j++, k++)\n                cipherText[j] = y[k];\n        }\n        return cipherText;\n    };\n    /**\n     * Decrypts cipher text with AES-IGE mode.\n     */\n    AES_IGE.prototype.decrypt = function (message, buf) {\n        var cipherText = getWords(message);\n        var text = buf || new Uint32Array(cipherText.length);\n        var prevY = this.iv.subarray(this.blockSize, this.iv.length);\n        var prevX = this.iv.subarray(0, this.blockSize);\n        var yXOR = new Uint32Array(this.blockSize);\n        for (var i = 0; i < text.length; i += this.blockSize) {\n            var x = cipherText.subarray(i, i + this.blockSize);\n            xor(x, prevY, yXOR);\n            var y = this.cipher.decrypt(yXOR);\n            xor(y, prevX);\n            prevX = x;\n            prevY = y;\n            for (var j = i, k = 0; j < text.length && k < 4; j++, k++)\n                text[j] = y[k];\n        }\n        return text;\n    };\n    return AES_IGE;\n}());\n\n/**\n * AES-IGE mode.\n */\nvar AES_IGE$1 = /** @class */ (function () {\n    function AES_IGE(key, counter, blockSize) {\n        if (blockSize === void 0) { blockSize = 16; }\n        this.offset = 0;\n        this.key = getWords(key);\n        this.counter = getWords(counter);\n        this.cipher = new AES(key);\n        this.blockSize = blockSize / 4;\n        if (this.counter.length !== 4) {\n            throw new Error('AES-CTR mode counter must be 16 bytes length');\n        }\n    }\n    /**\n     * Encrypts plain text with AES-IGE mode.\n     */\n    AES_IGE.prototype.encrypt = function (message, buf) {\n        var text = getWords(message);\n        var cipherText = buf || new Uint32Array(text.length);\n        var offset = this.offset;\n        for (var i = 0; i < text.length; i += this.blockSize) {\n            var x = this.cipher.encrypt(this.counter);\n            for (var j = i, k = offset; j < text.length && k < this.blockSize; j++, k++)\n                cipherText[j] = x[k] ^ text[j];\n            if (text.length - i >= this.blockSize)\n                this.incrementCounter();\n            if (offset) {\n                i -= offset;\n                offset = 0;\n            }\n        }\n        this.offset = (this.offset + (text.length % 4)) % 4;\n        return cipherText;\n    };\n    /**\n     * Decrypts cipher text with AES-IGE mode.\n     */\n    AES_IGE.prototype.decrypt = function (message, buf) {\n        return this.encrypt(message, buf);\n    };\n    AES_IGE.prototype.incrementCounter = function () {\n        // increment counter\n        for (var carry = this.counter.length - 1; carry >= 0; carry--) {\n            if (++this.counter[carry] < 0xFFFFFFFF)\n                break; // If overflowing, it'll be 0 and we'll have to continue propagating the carry\n        }\n    };\n    return AES_IGE;\n}());\n\nexport default AES;\nexport { AES_IGE$1 as CTR, AES_IGE as IGE };\n","import convertToUint8Array from \"./convertToUint8Array\";\r\n\r\nexport default function bytesToWordss(input: Parameters<typeof convertToUint8Array>[0]) {\r\n  const bytes = convertToUint8Array(input);\r\n\r\n  const words: number[] = [];\r\n  for(let i = 0, len = bytes.length; i < len; ++i) {\r\n    words[i >>> 2] |= bytes[i] << (24 - (i % 4) * 8);\r\n  }\r\n\r\n  return new Uint32Array(words);\r\n}\r\n","import {IGE} from '@cryptography/aes';\r\nimport addPadding from '../../../helpers/bytes/addPadding';\r\nimport bytesFromWordss from '../../../helpers/bytes/bytesFromWordss';\r\nimport bytesToWordss from '../../../helpers/bytes/bytesToWordss';\r\n\r\nexport default function aesSync(bytes: Uint8Array, keyBytes: Uint8Array, ivBytes: Uint8Array, encrypt = true) {\r\n  //console.log(dT(), 'AES start', bytes, keyBytes, ivBytes);\r\n\r\n  const cipher = new IGE(bytesToWordss(keyBytes), bytesToWordss(ivBytes));\r\n  const performedBytes = cipher[encrypt ? 'encrypt' : 'decrypt'](bytesToWordss(bytes));\r\n  //console.log(dT(), 'AES finish');\r\n\r\n  return bytesFromWordss(performedBytes);\r\n}\r\n\r\nexport function aesEncryptSync(bytes: Uint8Array, keyBytes: Uint8Array, ivBytes: Uint8Array) {\r\n  return aesSync(addPadding(bytes), keyBytes, ivBytes, true);\r\n}\r\n\r\nexport function aesDecryptSync(bytes: Uint8Array, keyBytes: Uint8Array, ivBytes: Uint8Array) {\r\n  return aesSync(bytes, keyBytes, ivBytes, false);\r\n}\r\n","export default function bytesFromWordss(input: Uint32Array) {\r\n  const o = new Uint8Array(input.byteLength);\r\n  for(let i = 0, length = input.length * 4; i < length; ++i) {\r\n    o[i] = ((input[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff);\r\n  }\r\n\r\n  return o;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nconst arrays = {\r\n  8: new Uint8Array(1),\r\n  16: new Uint16Array(1),\r\n  32: new Uint32Array(1),\r\n};\r\nexport function nextRandomUint(bits: 8 | 16 | 32) {\r\n  const array = arrays[bits];\r\n  crypto.getRandomValues(array);\r\n  return array[0];\r\n}\r\n\r\nexport function randomLong() {\r\n  return '' + nextRandomUint(32) + nextRandomUint(32) % 0xFFFFFF;\r\n}\r\n","import bigInt from \"big-integer\";\r\nimport { nextRandomUint } from \"../random\";\r\n\r\nexport default function bigIntRandom(min: bigInt.BigNumber, max: bigInt.BigNumber) {\r\n  return bigInt.randBetween(min, max, () => {\r\n    return nextRandomUint(32) / 0xFFFFFFFF;\r\n    /* const bits = 32;\r\n    const randomBytes = new Uint8Array(bits / 8);\r\n    crypto.getRandomValues(randomBytes);\r\n    const r = bigIntFromBytes(randomBytes).mod(bigInt(2).pow(bits));\r\n    return r.toJSNumber(); */\r\n  });\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n// Thanks to https://xn--2-umb.com/09/12/brent-pollard-rho-factorisation/\r\n\r\nimport bigInt from \"big-integer\";\r\nimport { bigIntFromBytes, bigIntToBytes } from \"../../../../helpers/bigInt/bigIntConversion\";\r\nimport bigIntRandom from \"../../../../helpers/bigInt/bigIntRandom\";\r\n\r\n// let test = 0;\r\nfunction BrentPollardFactor(n: bigInt.BigInteger) {\r\n  const two = bigInt[2];\r\n  if(n.remainder(two).isZero()) {\r\n    return two;\r\n  }\r\n\r\n  const m = bigInt(1000);\r\n  let a: bigInt.BigInteger,\r\n    x: bigInt.BigInteger,\r\n    y: bigInt.BigInteger,\r\n    ys: bigInt.BigInteger,\r\n    r: bigInt.BigInteger,\r\n    q: bigInt.BigInteger,\r\n    g: bigInt.BigInteger;\r\n  do \r\n    a = bigIntRandom(bigInt.one, n.minus(1));\r\n  while(a.isZero() || a.eq(n.minus(two)));\r\n  y = bigIntRandom(bigInt.one, n.minus(1));\r\n  r = bigInt.one;\r\n  q = bigInt.one;\r\n\r\n  // if(!test++) {\r\n  //   a = bigInt(3);\r\n  //   y = bigInt(3);\r\n  // }\r\n\r\n  const bigIntUint64 = bigInt('FFFFFFFFFFFFFFFF', 16);\r\n  const bigIntUint64MinusPqPlusOne = bigIntUint64.minus(n).plus(1);\r\n\r\n  const performY = (y: bigInt.BigInteger) => {\r\n    y = y.pow(two).mod(n);\r\n    y = y.add(a);\r\n    if(y.lesser(a)) { // it slows down the script\r\n      y = y.add(bigIntUint64MinusPqPlusOne);\r\n    }\r\n    y = y.mod(n);\r\n    return y;\r\n  };\r\n\r\n  do {\r\n    x = y;\r\n    for(let i = 0; bigInt(i).lesser(r); ++i) {\r\n      y = performY(y);\r\n    }\r\n\r\n    let k = bigInt.zero;\r\n    do {\r\n      ys = y;\r\n      const condition = bigInt.min(m, r.minus(k));\r\n      for(let i = 0; bigInt(i).lesser(condition); ++i) {\r\n        y = performY(y);\r\n        q = q.multiply(x.greater(y) ? x.minus(y) : y.minus(x)).mod(n);\r\n      }\r\n      g = bigInt.gcd(q, n);\r\n      k = k.add(m);\r\n    } while(k.lesser(r) && g.eq(bigInt.one));\r\n\r\n    r = r.shiftLeft(bigInt.one);\r\n  } while(g.eq(bigInt.one));\r\n\r\n  if(g.eq(n)) {\r\n    do {\r\n      ys = performY(ys);\r\n      g = bigInt.gcd(x.minus(ys).abs(), n);\r\n    } while(g.eq(bigInt.one));\r\n  }\r\n\r\n  return g;\r\n}\r\n\r\nfunction primeFactors(pqBytes: Uint8Array | number[]) {\r\n  const n = bigIntFromBytes(pqBytes);\r\n\r\n  const factors: bigInt.BigInteger[] = [];\r\n  const primes: bigInt.BigInteger[] = [];\r\n\r\n  let factor = BrentPollardFactor(n);\r\n  factors.push(n.divide(factor));\r\n  factors.push(factor);\r\n\r\n  // return [factor];\r\n\r\n  do {\r\n    const m = factors.pop();\r\n\r\n    if(m.eq(bigInt.one))\r\n      continue;\r\n\r\n    if(m.isPrime(true)) {\r\n      primes.push(m);\r\n\r\n      // Remove the prime from the other factors\r\n      for(let i = 0; i < factors.length; ++i) {\r\n        let k = factors[i];\r\n        if(k.mod(m).isZero()) {\r\n          do\r\n            k = k.divide(m);\r\n          while(k.mod(m).isZero());\r\n          factors[i] = k;\r\n        }\r\n      }\r\n    } else {\r\n      // factor = m.lesser(100) ? bigInt(PollardRho(m.toJSNumber())) : this.brentPollardFactor(m);\r\n      factor = BrentPollardFactor(m);\r\n      factors.push(m.divide(factor));\r\n      factors.push(factor);\r\n    }\r\n  } while(factors.length);\r\n\r\n  return primes;\r\n}\r\n\r\nexport default function factorizeBrentPollardPQ(pqBytes: Uint8Array | number[]): [Uint8Array, Uint8Array] {\r\n  let factors = primeFactors(pqBytes);\r\n  factors.sort((a, b) => a.compare(b));\r\n  if(factors.length > 2) {\r\n    factors = [\r\n      factors.splice(factors.length - 2, 1)[0], \r\n      factors.reduce((acc, v) => acc.multiply(v), bigInt.one)\r\n    ];\r\n  }\r\n  \r\n  const p = factors[0], q = factors[factors.length - 1];\r\n  return (p.lesser(q) ? [p, q] : [q, p]).map((b) => bigIntToBytes(b)) as any;\r\n}\r\n","const subtle = typeof(window) !== 'undefined' && 'crypto' in window ? window.crypto.subtle : self.crypto.subtle;\r\n\r\nexport default subtle;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { BigInteger } from \"big-integer\";\r\nimport { bigIntFromBytes, bigIntToBytes } from \"../../../helpers/bigInt/bigIntConversion\";\r\nimport addPadding from \"../../../helpers/bytes/addPadding\";\r\nimport subtle from \"../subtle\";\r\n\r\nconst COUNTER_LENGTH = 16;\r\n\r\nexport default class CTR {\r\n  private cryptoKey: CryptoKey;\r\n  // private encLeft: Uint8Array;\r\n  private leftLength: number;\r\n  private mode: 'encrypt' | 'decrypt';\r\n  private counter: BigInteger;\r\n  private queue: {data: Uint8Array, resolve: (data: Uint8Array) => void}[];\r\n  private releasing: boolean;\r\n  \r\n  constructor(mode: 'encrypt' | 'decrypt', cryptoKey: CryptoKey, counter: Uint8Array) {\r\n    this.mode = mode;\r\n    this.cryptoKey = cryptoKey;\r\n    this.queue = [];\r\n    this.counter = bigIntFromBytes(counter);\r\n  }\r\n\r\n  public async update(data: Uint8Array) {\r\n    return new Promise<Uint8Array>((resolve) => {\r\n      this.queue.push({data, resolve});\r\n      this.release();\r\n    });\r\n  }\r\n\r\n  private async release() {\r\n    if(this.releasing) {\r\n      return;\r\n    }\r\n\r\n    this.releasing = true;\r\n    while(this.queue.length) {\r\n      const {data, resolve} = this.queue.shift();\r\n      resolve(await this._update(data));\r\n    }\r\n    this.releasing = false;\r\n  }\r\n\r\n  private async perform(data: Uint8Array) {\r\n    const arrayBuffer: ArrayBuffer = await subtle[this.mode]({\r\n        name: 'AES-CTR',\r\n        counter: addPadding(bigIntToBytes(this.counter), COUNTER_LENGTH, true, true, true),\r\n        length: 128\r\n      },\r\n      this.cryptoKey,\r\n      data\r\n    );\r\n\r\n    return arrayBuffer;\r\n  }\r\n\r\n  private async _update(data: Uint8Array) {\r\n    let toEncrypt = data;\r\n    let head: Uint8Array, tail: Uint8Array;\r\n    if(this.leftLength) {\r\n      // const leftLength = this.encLeft.byteLength;\r\n      const leftLength = this.leftLength;\r\n      const leftLength2 = COUNTER_LENGTH - leftLength;\r\n      // const left = this.encLeft.concat(toEncrypt.slice(0, leftLength2));\r\n      const left = (new Uint8Array(leftLength)).concat(toEncrypt.slice(0, leftLength2));\r\n\r\n      const performed = await this.perform(left);\r\n\r\n      head = new Uint8Array(performed.slice(leftLength));\r\n\r\n      toEncrypt = toEncrypt.slice(leftLength2);\r\n\r\n      this.counter = this.counter.add(1);\r\n    }\r\n\r\n    tail = new Uint8Array(await this.perform(toEncrypt));\r\n\r\n    const result = head ? head.concat(tail) : tail;\r\n\r\n    let length = toEncrypt.length;\r\n    const leftAfter = length % COUNTER_LENGTH;\r\n    length -= leftAfter;\r\n\r\n    const a = length / COUNTER_LENGTH;\r\n    this.counter = this.counter.add(a);\r\n\r\n    this.leftLength = leftAfter || undefined;\r\n    // this.encLeft = leftAfter ? toEncrypt.slice(-leftAfter) : undefined;\r\n\r\n    return result;\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport CTR from \"./utils/aesCTR\";\r\nimport subtle from \"./subtle\";\r\n\r\nconst aesCTRs: Map<number, K> = new Map();\r\nlet lastCTRId = -1;\r\n\r\ntype K = {\r\n  enc: CTR, \r\n  dec: CTR, \r\n};\r\n\r\nexport async function aesCtrPrepare({encKey, encIv, decKey, decIv}: {[k in 'encKey' | 'encIv' | 'decKey' | 'decIv']: Uint8Array}) {\r\n  const id = ++lastCTRId;\r\n\r\n  const a = [['encrypt', encKey], ['decrypt', decKey]] as ['encrypt' | 'decrypt', Uint8Array][];\r\n  const promises = a.map(([mode, key]) => {\r\n    return subtle.importKey(\r\n      'raw',\r\n      key,\r\n      {name: 'AES-CTR'},\r\n      false,\r\n      [mode]\r\n    )\r\n  });\r\n  \r\n  const [encCryptoKey, decCryptoKey] = await Promise.all(promises);\r\n  const enc = new CTR('encrypt', encCryptoKey, encIv.slice());\r\n  const dec = new CTR('decrypt', decCryptoKey, decIv.slice());\r\n\r\n  const k: K = {\r\n    enc,\r\n    dec, \r\n  };\r\n\r\n  aesCTRs.set(id, k);\r\n\r\n  return id;\r\n}\r\n\r\nexport async function aesCtrProcess({id, data, operation}: {id: number, data: Uint8Array, operation: 'encrypt' | 'decrypt'}) {\r\n  const ctrs = aesCTRs.get(id);\r\n  const result = await (operation === 'encrypt' ? ctrs.enc : ctrs.dec).update(data);\r\n  return result;\r\n}\r\n\r\nexport function aesCtrDestroy(id: number) {\r\n  aesCTRs.delete(id);\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport '../polyfill'; // just to include\r\n\r\nimport bytesModPow from \"../../helpers/bytes/bytesModPow\";\r\nimport gzipUncompress from \"../../helpers/gzipUncompress\";\r\nimport listenMessagePort from \"../../helpers/listenMessagePort\";\r\nimport getEmojisFingerprint from \"../calls/helpers/getEmojisFingerprint\";\r\nimport computeDhKey from \"./computeDhKey\";\r\nimport cryptoMessagePort from \"./cryptoMessagePort\";\r\nimport { CryptoMethods } from \"./crypto_methods\";\r\nimport generateDh from \"./generateDh\";\r\nimport computeSRP from \"./srp\";\r\nimport { aesEncryptSync, aesDecryptSync } from \"./utils/aesIGE\";\r\nimport factorizeBrentPollardPQ from \"./utils/factorize/BrentPollard\";\r\nimport pbkdf2 from \"./utils/pbkdf2\";\r\nimport rsaEncrypt from \"./utils/rsa\";\r\nimport sha1 from \"./utils/sha1\";\r\nimport sha256 from \"./utils/sha256\";\r\nimport { aesCtrDestroy, aesCtrPrepare, aesCtrProcess } from './aesCtrUtils';\r\n\r\nconsole.log('CryptoWorker start');\r\n\r\nconst cryptoMethods: CryptoMethods = {\r\n  'sha1': sha1,\r\n  'sha256': sha256,\r\n  'pbkdf2': pbkdf2,\r\n  'aes-encrypt': aesEncryptSync,\r\n  'aes-decrypt': aesDecryptSync,\r\n  'rsa-encrypt': rsaEncrypt,\r\n  'factorize': factorizeBrentPollardPQ,\r\n  // 'factorize-tdlib': factorizeTdlibPQ, \r\n  // 'factorize-new-new': pqPrimeLeemonNew, \r\n  'mod-pow': bytesModPow,\r\n  'gzipUncompress': gzipUncompress,\r\n  'computeSRP': computeSRP,\r\n  'generate-dh': generateDh,\r\n  'compute-dh-key': computeDhKey,\r\n  'get-emojis-fingerprint': getEmojisFingerprint,\r\n  'aes-ctr-prepare': aesCtrPrepare,\r\n  'aes-ctr-process': aesCtrProcess,\r\n  'aes-ctr-destroy': aesCtrDestroy\r\n};\r\n\r\ncryptoMessagePort.addEventListener('invoke', ({method, args}) => {\r\n  // @ts-ignore\r\n  const result: any = cryptoMethods[method](...args);\r\n  return result;\r\n});\r\n\r\nif(typeof(MessageChannel) !== 'undefined') listenMessagePort(cryptoMessagePort, (source) => {\r\n  const channel = new MessageChannel();\r\n  cryptoMessagePort.attachPort(channel.port1);\r\n  cryptoMessagePort.invokeVoid('port', undefined, source, [channel.port2]);\r\n});\r\n","import convertToUint8Array from \"../../../helpers/bytes/convertToUint8Array\";\r\nimport subtle from \"../subtle\";\r\n//import sha1 from '@cryptography/sha1';\r\n\r\nexport default function sha1(bytes: Parameters<typeof convertToUint8Array>[0]) {\r\n  return subtle.digest('SHA-1', convertToUint8Array(bytes)).then((b) => {\r\n    return new Uint8Array(b);\r\n  });\r\n  /* //console.trace(dT(), 'SHA-1 hash start', bytes);\r\n\r\n  const hashBytes: number[] = [];\r\n\r\n  let hash = sha1(String.fromCharCode.apply(null, \r\n    bytes instanceof Uint8Array ? [...bytes] : [...new Uint8Array(bytes)]));\r\n  for(let i = 0; i < hash.length; ++i) {\r\n    hashBytes.push(hash.charCodeAt(i));\r\n  }\r\n\r\n  //console.log(dT(), 'SHA-1 hash finish', hashBytes, bytesToHex(hashBytes));\r\n\r\n  return new Uint8Array(hashBytes); */\r\n}\r\n","import convertToUint8Array from \"../../../helpers/bytes/convertToUint8Array\";\r\nimport subtle from \"../subtle\";\r\n//import sha256 from '@cryptography/sha256';\r\n\r\nexport default function sha256(bytes: Parameters<typeof convertToUint8Array>[0]) {\r\n  return subtle.digest('SHA-256', convertToUint8Array(bytes)).then((b) => {\r\n    //console.log('legacy', performance.now() - perfS);\r\n    return new Uint8Array(b);\r\n  });\r\n  /* //console.log('SHA-256 hash start');\r\n\r\n  let perfS = performance.now();\r\n  \r\n\r\n  let perfD = performance.now();\r\n  let words = typeof(bytes) === 'string' ? bytes : bytesToWordss(bytes as any);\r\n  let hash = sha256(words);\r\n  console.log('darutkin', performance.now() - perfD);\r\n\r\n  //console.log('SHA-256 hash finish', hash, sha256(words, 'hex'));\r\n\r\n  return bytesFromWordss(hash); */\r\n}\r\n","import subtle from \"../subtle\";\r\n\r\nexport default async function pbkdf2(buffer: Parameters<SubtleCrypto['importKey']>[1], salt: HkdfParams['salt'], iterations: number) {\r\n  const importKey = await subtle.importKey(\r\n    'raw',\r\n    buffer,\r\n    {name: 'PBKDF2'},\r\n    false,\r\n    [/* 'deriveKey',  */'deriveBits']\r\n  );\r\n  \r\n  /* await subtle.deriveKey(\r\n    {\r\n      name: 'PBKDF2',\r\n      salt,\r\n      iterations,\r\n      hash: {name: 'SHA-512'}\r\n    },\r\n    importKey,\r\n    {\r\n      name: 'AES-CTR',\r\n      length: 256\r\n    },\r\n    false,\r\n    ['encrypt', 'decrypt']\r\n  ); */\r\n\r\n  const bits = subtle.deriveBits({\r\n      name: 'PBKDF2',\r\n      salt,\r\n      iterations,\r\n      hash: {name: 'SHA-512'},\r\n    },\r\n    importKey,\r\n    512\r\n  );\r\n\r\n  return bits.then((buffer) => new Uint8Array(buffer));\r\n}\r\n","import type { RSAPublicKeyHex } from \"../../mtproto/rsaKeysManager\";\r\nimport bytesModPow from \"../../../helpers/bytes/bytesModPow\";\r\nimport bytesFromHex from \"../../../helpers/bytes/bytesFromHex\";\r\n\r\nexport default function rsaEncrypt(bytes: Uint8Array, publicKey: RSAPublicKeyHex) {\r\n  return bytesModPow(bytes, bytesFromHex(publicKey.exponent), bytesFromHex(publicKey.modulus));\r\n}\r\n","//export function gzipUncompress(bytes: ArrayBuffer, toString: true): string;\r\n\r\n// @ts-ignore\r\nimport pako from 'pako/dist/pako_inflate.min.js';\r\n// import dT from './dT';\r\n\r\n//export function gzipUncompress(bytes: ArrayBuffer, toString?: false): Uint8Array;\r\nexport default function gzipUncompress(bytes: ArrayBuffer, toString?: boolean): string | Uint8Array {\r\n  // console.log(dT(), 'Gzip uncompress start');\r\n  const result = pako.inflate(bytes, toString ? {to: 'string'} : undefined);\r\n  // console.log(dT(), 'Gzip uncompress finish'/* , result */);\r\n  return result;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport cryptoWorker from \"./cryptoMessagePort\";\r\nimport { AccountPassword, InputCheckPasswordSRP, PasswordKdfAlgo } from \"../../layer\";\r\nimport addPadding from \"../../helpers/bytes/addPadding\";\r\nimport bufferConcats from \"../../helpers/bytes/bufferConcats\";\r\nimport bytesXor from \"../../helpers/bytes/bytesXor\";\r\nimport convertToUint8Array from \"../../helpers/bytes/convertToUint8Array\";\r\nimport bigInt from 'big-integer';\r\nimport { bigIntFromBytes, bigIntToBytes } from \"../../helpers/bigInt/bigIntConversion\";\r\nimport bytesToHex from \"../../helpers/bytes/bytesToHex\";\r\n\r\nexport async function makePasswordHash(password: string, client_salt: Uint8Array, server_salt: Uint8Array) {\r\n  // ! look into crypto_methods.test.ts\r\n  let buffer = await cryptoWorker.invokeCrypto('sha256', bufferConcats(client_salt, new TextEncoder().encode(password), client_salt));\r\n  buffer = bufferConcats(server_salt, buffer, server_salt);\r\n  buffer = await cryptoWorker.invokeCrypto('sha256', buffer);\r\n\r\n  let hash = await cryptoWorker.invokeCrypto('pbkdf2', new Uint8Array(buffer), client_salt, 100000);\r\n  hash = bufferConcats(server_salt, hash, server_salt);\r\n\r\n  buffer = await cryptoWorker.invokeCrypto('sha256', hash);\r\n\r\n  return buffer;\r\n}\r\n\r\nexport default async function computeSRP(password: string, state: AccountPassword, isNew: boolean) {\r\n  const algo = (isNew ? state.new_algo : state.current_algo) as PasswordKdfAlgo.passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow;\r\n\r\n  const p = bigIntFromBytes(algo.p);\r\n  const g = bigInt(algo.g);\r\n\r\n  /* if(B.compareTo(BigInteger.ZERO) < 0) {\r\n    console.error('srp_B < 0')\r\n  }\r\n  \r\n  if(B.compareTo(p) <= 0) {\r\n    console.error('srp_B <= p');\r\n  } */\r\n  \r\n  /* let check_prime_and_good = (bytes: any, g: number) => {\r\n    let good_prime = 'c71caeb9c6b1c9048e6c522f70f13f73980d40238e3e21c14934d037563d930f48198a0aa7c14058229493d22530f4dbfa336f6e0ac925139543aed44cce7c3720fd51f69458705ac68cd4fe6b6b13abdc9746512969328454f18faf8c595f642477fe96bb2a941d5bcd1d4ac8cc49880708fa9b378e3c4f3a9060bee67cf9a4a4a695811051907e162753b56b0f6b410dba74d8a84b2a14b3144e0ef1284754fd17ed950d5965b4b9dd46582db1178d169c6bc465b0d6ff9ca3928fef5b9ae4e418fc15e83ebea0f87fa9ff5eed70050ded2849f47bf959d956850ce929851f0d8115f635b105ee2e4e15d04b2454bf6f4fadf034b10403119cd8e3b92fcc5b';\r\n    \r\n    if(bytesToHex(bytes) === good_prime && [3, 4, 5, 7].indexOf(g) !== -1) {\r\n      return true;\r\n    }\r\n    \r\n    // TO-DO check_prime_and_good_check\r\n  }; */\r\n  \r\n  //check_prime_and_good(algo.p, g);\r\n  \r\n  const pw_hash = await makePasswordHash(password, algo.salt1, algo.salt2);\r\n  const x = bigInt(bytesToHex(pw_hash), 16);\r\n  \r\n  const padArray = function(arr: number[] | Uint8Array, len: number) {\r\n    if(!(arr instanceof Uint8Array)) {\r\n      arr = convertToUint8Array(arr);\r\n    }\r\n    \r\n    return addPadding(arr, len, true, true, true);\r\n  };\r\n  \r\n  const v = g.modPow(x, p);\r\n  \r\n  const flipper = (arr: Uint8Array | number[]) => {\r\n    const out = new Uint8Array(arr.length);\r\n    for(let i = 0; i < arr.length; i += 4) {\r\n      out[i] = arr[i + 3];\r\n      out[i + 1] = arr[i + 2];\r\n      out[i + 2] = arr[i + 1];\r\n      out[i + 3] = arr[i];\r\n    }\r\n    \r\n    return out;\r\n  };\r\n  \r\n  // * https://core.telegram.org/api/srp#setting-a-new-2fa-password\r\n  if(isNew) {\r\n    const bytes = bigIntToBytes(v);\r\n    return padArray(/* (isBigEndian ? bytes.reverse() : bytes) */bytes, 256);\r\n  }\r\n  \r\n  const B = bigIntFromBytes(state.srp_B);\r\n  \r\n  const pForHash = padArray(bigIntToBytes(p), 256);\r\n  const gForHash = padArray(bigIntToBytes(g), 256);\r\n  const b_for_hash = padArray(bigIntToBytes(B), 256);\r\n\r\n  const kHash = await cryptoWorker.invokeCrypto('sha256', bufferConcats(pForHash, gForHash));\r\n  const k = bigIntFromBytes(kHash);\r\n\r\n  const k_v = k.multiply(v).mod(p);\r\n\r\n  const is_good_mod_exp_first = (modexp: bigInt.BigInteger, prime: bigInt.BigInteger) => {\r\n    const diff = prime.subtract(modexp);\r\n    const min_diff_bits_count = 2048 - 64;\r\n    const max_mod_exp_size = 256;\r\n    if(diff.isNegative() ||\r\n      diff.bitLength().toJSNumber() < min_diff_bits_count || \r\n      modexp.bitLength().toJSNumber() < min_diff_bits_count || \r\n      Math.floor((modexp.bitLength().toJSNumber() + 7) / 8) > max_mod_exp_size)\r\n        return false;\r\n    return true;\r\n  };\r\n\r\n  const generate_and_check_random = async() => {\r\n    while(true) {\r\n      const a = bigIntFromBytes(flipper(state.secure_random));\r\n      //const a = str2bigInt('9153faef8f2bb6da91f6e5bc96bc00860a530a572a0f45aac0842b4602d711f8bda8d59fb53705e4ae3e31a3c4f0681955425f224297b8e9efd898fec22046debb7ba8a0bcf2be1ada7b100424ea318fdcef6ccfe6d7ab7d978c0eb76a807d4ab200eb767a22de0d828bc53f42c5a35c2df6e6ceeef9a3487aae8e9ef2271f2f6742e83b8211161fb1a0e037491ab2c2c73ad63c8bd1d739de1b523fe8d461270cedcf240de8da75f31be4933576532955041dc5770c18d3e75d0b357df9da4a5c8726d4fced87d15752400883dc57fa1937ac17608c5446c4774dcd123676d683ce3a1ab9f7e020ca52faafc99969822717c8e07ea383d5fb1a007ba0d170cb', 16);\r\n\r\n      const A = g.modPow(a, p);\r\n      if(is_good_mod_exp_first(A, p)) {\r\n        const a_for_hash = bigIntToBytes(A);\r\n\r\n        const s = await cryptoWorker.invokeCrypto('sha256', bufferConcats(a_for_hash, b_for_hash));\r\n        // const u = bigInt(s.hex, 16);\r\n        const u = bigIntFromBytes(s);\r\n        if(!u.isZero() && !u.isNegative())\r\n          return {a, a_for_hash, u};\r\n      } \r\n    }\r\n  }\r\n\r\n  const {a, a_for_hash, u} = await generate_and_check_random();\r\n\r\n  let g_b: bigInt.BigInteger;\r\n  if(!B.greater(k_v)) {\r\n    g_b = B.add(p);\r\n  } else g_b = B;\r\n  g_b = g_b.subtract(k_v).mod(p);\r\n\r\n  const ux = u.multiply(x);\r\n  const a_ux = a.add(ux);\r\n  const S = g_b.modPow(a_ux, p);\r\n\r\n  const K = await cryptoWorker.invokeCrypto('sha256', padArray(bigIntToBytes(S), 256));\r\n\r\n  let h1 = await cryptoWorker.invokeCrypto('sha256', pForHash);\r\n  const h2 = await cryptoWorker.invokeCrypto('sha256', gForHash);\r\n  h1 = bytesXor(h1, h2);\r\n\r\n  const buff = bufferConcats(\r\n    h1, \r\n    await cryptoWorker.invokeCrypto('sha256', algo.salt1),\r\n    await cryptoWorker.invokeCrypto('sha256', algo.salt2),\r\n    a_for_hash,\r\n    b_for_hash,\r\n    K\r\n  );\r\n\r\n  const M1 = await cryptoWorker.invokeCrypto('sha256', buff);\r\n\r\n  const out: InputCheckPasswordSRP.inputCheckPasswordSRP = {\r\n    _: 'inputCheckPasswordSRP', \r\n    srp_id: state.srp_id, \r\n    A: new Uint8Array(a_for_hash), \r\n    M1\r\n  };\r\n\r\n  return out;\r\n}\r\n","export default function bytesToHex(bytes: ArrayLike<number>) {\r\n  const length = bytes.length;\r\n  const arr: string[] = new Array(length);\r\n  for(let i = 0; i < length; ++i) {\r\n    arr[i] = (bytes[i] < 16 ? '0' : '') + (bytes[i] || 0).toString(16);\r\n  }\r\n  return arr.join('');\r\n}\r\n","export default function bytesXor(bytes1: Uint8Array, bytes2: Uint8Array) {\r\n  const len = bytes1.length;\r\n  const bytes = new Uint8Array(len);\r\n\r\n  for(let i = 0; i < len; ++i) {\r\n    bytes[i] = bytes1[i] ^ bytes2[i];\r\n  }\r\n\r\n  return bytes;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport bigInt from \"big-integer\";\r\nimport randomize from \"../../helpers/array/randomize\";\r\nimport { bigIntFromBytes } from \"../../helpers/bigInt/bigIntConversion\";\r\nimport addPadding from \"../../helpers/bytes/addPadding\";\r\nimport bytesFromHex from \"../../helpers/bytes/bytesFromHex\";\r\nimport { MessagesDhConfig } from \"../../layer\";\r\nimport CallInstance from \"../calls/callInstance\";\r\nimport cryptoWorker from \"./cryptoMessagePort\";\r\n\r\nexport default async function generateDh(dhConfig: MessagesDhConfig.messagesDhConfig) {\r\n  const {p, g} = dhConfig;\r\n  \r\n  const generateA = (p: Uint8Array) => {\r\n    for(;;) {\r\n      const a = randomize(new Uint8Array(p.length));\r\n      // const a = new Uint8Array(4).randomize();\r\n      \r\n      const aBigInt = bigIntFromBytes(a); // str2bigInt(bytesToHex(a), 16);\r\n      if(!aBigInt.greater(bigInt.one)) {\r\n        continue;\r\n      }\r\n      \r\n      const pBigInt = bigIntFromBytes(p); // str2bigInt(bytesToHex(p), 16);\r\n      if(!aBigInt.lesser(pBigInt.subtract(bigInt.one))) {\r\n        continue;\r\n      }\r\n      \r\n      return a;\r\n    }\r\n  };\r\n  \r\n  const a = generateA(p);\r\n  // const a = new Uint8Array([0]);\r\n  \r\n  const gBytes = bytesFromHex(g.toString(16));\r\n  const g_a = addPadding(await cryptoWorker.invokeCrypto('mod-pow', gBytes, a, p), 256, true, true, true);\r\n  const g_a_hash = await cryptoWorker.invokeCrypto('sha256', g_a);\r\n  \r\n  const dh: CallInstance['dh'] = {\r\n    a: a,\r\n    g_a: g_a,\r\n    g_a_hash: g_a_hash,\r\n    p\r\n  };\r\n  \r\n  return dh;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { bigIntFromBytes } from \"../../helpers/bigInt/bigIntConversion\";\r\nimport cryptoWorker from \"./cryptoMessagePort\";\r\n\r\nexport default async function computeDhKey(g_b: Uint8Array, a: Uint8Array, p: Uint8Array) {\r\n  const key = await cryptoWorker.invokeCrypto('mod-pow', g_b, a, p);\r\n  const keySha1Hashed = await cryptoWorker.invokeCrypto('sha1', key);\r\n  const key_fingerprint = keySha1Hashed.slice(-8).reverse(); // key_fingerprint: key_fingerprint as any // ! it doesn't work\r\n  const key_fingerprint_long = bigIntFromBytes(key_fingerprint).toString(10); // bigInt2str(str2bigInt(bytesToHex(key_fingerprint), 16), 10);\r\n\r\n  return {key, key_fingerprint: key_fingerprint_long};\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport ctx from \"../environment/ctx\";\r\nimport SuperMessagePort from \"../lib/mtproto/superMessagePort\";\r\n\r\nexport default function listenMessagePort(\r\n  messagePort: SuperMessagePort<any, any, any>, \r\n  onConnect?: (source: MessageEventSource) => void,\r\n  onDisconnect?: (source: MessageEventSource) => void\r\n) {\r\n  const attachPort = (s: any) => {\r\n    messagePort.attachPort(s);\r\n    onConnect && onConnect(s);\r\n  };\r\n\r\n  onDisconnect && messagePort.setOnPortDisconnect(onDisconnect);\r\n\r\n  if(typeof(SharedWorkerGlobalScope) !== 'undefined') {\r\n    (ctx as any as SharedWorkerGlobalScope).addEventListener('connect', (e) => attachPort(e.source));\r\n  } else {\r\n    attachPort(ctx);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport DEBUG from \"../config/debug\";\r\nimport { IS_FIREFOX, IS_SAFARI } from \"../environment/userAgent\";\r\nimport { IS_SERVICE_WORKER, IS_WEB_WORKER } from \"../helpers/context\";\r\nimport dT from \"../helpers/dT\";\r\n\r\nexport enum LogTypes {\r\n  None = 0,\r\n  Error = 1,\r\n  Warn = 2,\r\n  Log = 4,\r\n  Debug = 8\r\n};\r\n\r\nexport const LOG_LEVELS = [LogTypes.None, LogTypes.Error, LogTypes.Warn, LogTypes.Log, LogTypes.Debug];\r\n\r\nconst IS_WEBKIT = IS_SAFARI || IS_FIREFOX;\r\n\r\n// let getCallerFunctionNameFromLine: (line: string) => string;\r\n// if(IS_WEBKIT) {\r\n//   getCallerFunctionNameFromLine = (line) => {\r\n//     const splitted = line.split('@');\r\n//     return splitted[0];\r\n//   };\r\n// } else {\r\n//   getCallerFunctionNameFromLine = (line: string) => {\r\n//     const splitted = line.trim().split(' ');\r\n//     if(splitted.length === 3) {\r\n//       return splitted[1].slice(splitted[1].lastIndexOf('.') + 1);\r\n//     }\r\n//   };\r\n// }\r\n\r\nconst STYLES_SUPPORTED = !IS_WEBKIT;\r\n// const LINE_INDEX = IS_WEBKIT ? 2 : 3;\r\n\r\n// function getCallerFunctionName() {\r\n//   const stack = new Error().stack;\r\n//   const lines = stack.split('\\n');\r\n//   const line = lines[LINE_INDEX] || lines[lines.length - 1];\r\n//   // const match = line.match(/\\.([^\\.]+?)\\s/);\r\n//   // line = match ? match[1] : line.trim();\r\n//   const caller = getCallerFunctionNameFromLine(line) || '<anonymous>';\r\n//   return '[' + caller + ']';\r\n// }\r\n\r\nexport const LOGGER_STYLES = {\r\n  reset: \"\\x1b[0m\",\r\n  bright: \"\\x1b[1m\",\r\n  dim: \"\\x1b[2m\",\r\n  underscore: \"\\x1b[4m\",\r\n  blink: \"\\x1b[5m\",\r\n  reverse: \"\\x1b[7m\",\r\n  hidden: \"\\x1b[8m\",\r\n  // Foreground (text) colors\r\n  fg: {\r\n    black: \"\\x1b[30m\",\r\n    red: \"\\x1b[31m\",\r\n    green: \"\\x1b[32m\",\r\n    yellow: \"\\x1b[33m\",\r\n    blue: \"\\x1b[34m\",\r\n    magenta: \"\\x1b[35m\",\r\n    cyan: \"\\x1b[36m\",\r\n    white: \"\\x1b[37m\"\r\n  },\r\n  // Background colors\r\n  bg: {\r\n    black: \"\\x1b[40m\",\r\n    red: \"\\x1b[41m\",\r\n    green: \"\\x1b[42m\",\r\n    yellow: \"\\x1b[43m\",\r\n    blue: \"\\x1b[44m\",\r\n    magenta: \"\\x1b[45m\",\r\n    cyan: \"\\x1b[46m\",\r\n    white: \"\\x1b[47m\"\r\n  }\r\n};\r\n\r\nexport type Logger = {\r\n  (...args: any[]): void;\r\n  warn(...args: any[]): void;\r\n  info(...args: any[]): void;\r\n  error(...args: any[]): void;\r\n  trace(...args: any[]): void;\r\n  debug(...args: any[]): void;\r\n  assert(...args: any[]): void;\r\n  // log(...args: any[]): void;\r\n  group(...args: any[]): void;\r\n  groupCollapsed(...args: any[]): void;\r\n  groupEnd(...args: any[]): void;\r\n  setPrefix(newPrefix: string): void;\r\n  setLevel(level: 0 | 1 | 2 | 3 | 4): void;\r\n  bindPrefix(prefix: string): Logger;\r\n};\r\n\r\nconst methods: ['debug' | 'info' | 'warn' | 'error' | 'assert' | 'trace'/*  | 'log' */ | 'group' | 'groupCollapsed' | 'groupEnd', LogTypes][] = [\r\n  [\"debug\", LogTypes.Debug], \r\n  [\"info\", LogTypes.Log], \r\n  [\"warn\", LogTypes.Warn], \r\n  [\"error\", LogTypes.Error], \r\n  [\"assert\", LogTypes.Error],\r\n  [\"trace\", LogTypes.Log],\r\n  [\"group\", LogTypes.Log],\r\n  [\"groupCollapsed\", LogTypes.Log],\r\n  [\"groupEnd\", LogTypes.Log]\r\n  // [\"log\", LogTypes.Log]\r\n];\r\n\r\nexport function logger(prefix: string, type: LogTypes = LogTypes.Log | LogTypes.Warn | LogTypes.Error, ignoreDebugReset = false, style = ''): Logger {\r\n  let originalPrefix: string;\r\n  if(!DEBUG && !ignoreDebugReset/*  || true */) {\r\n    type = LogTypes.Error;\r\n  }\r\n\r\n  if(!STYLES_SUPPORTED) {\r\n    style = '';\r\n  } else if(!style) {\r\n    if(IS_SERVICE_WORKER) style = LOGGER_STYLES.fg.yellow;\r\n    else if(IS_WEB_WORKER) style = LOGGER_STYLES.fg.cyan;\r\n  }\r\n\r\n  let originalStyle = style;\r\n  if(style) style = `%s ${style}%s`;\r\n  else style = '%s';\r\n\r\n  //level = LogLevels.log | LogLevels.warn | LogLevels.error | LogLevels.debug\r\n\r\n  const log: Logger = function(...args: any[]) {\r\n    return type & LogTypes.Log && console.log(style, dT(), prefix, /* getCallerFunctionName(), */ ...args);\r\n  } as any;\r\n\r\n  methods.forEach(([method, logType]) => {\r\n    log[method] = function(...args: any[]) {\r\n      return type & logType && console[method](style, dT(), prefix, /* getCallerFunctionName(), */ ...args);\r\n    };\r\n  });\r\n\r\n  log.setPrefix = function(newPrefix: string) {\r\n    originalPrefix = newPrefix;\r\n    prefix = '[' + newPrefix + ']';\r\n  };\r\n\r\n  log.setPrefix(prefix);\r\n\r\n  log.setLevel = function(level: 0 | 1 | 2 | 3 | 4) {\r\n    type = LOG_LEVELS.slice(0, level + 1).reduce((acc, v) => acc | v, 0) as any;\r\n  };\r\n\r\n  log.bindPrefix = function(prefix: string) {\r\n    return logger(`${originalPrefix}] [${prefix}`, type, ignoreDebugReset, originalStyle);\r\n  };\r\n\r\n  return log;\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [699,211,960], () => (__webpack_require__(9685)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames not based on template\n\tif (chunkId === 960) return \"960.c1e078e9a589b707cb9e.bundle.js\";\n\t// return url for filenames based on template\n\treturn \"\" + {\"211\":\"npm.big-integer\",\"699\":\"npm.pako\"}[chunkId] + \".\" + {\"211\":\"a7ea0f3283af2967a6ae\",\"699\":\"f16d6f756c34f3914132\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t589: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = this[\"webpackChunktweb\"] = this[\"webpackChunktweb\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","oldGetScript","oldLoadScript","queryMap","countMap","next","USER_AGENT","navigator","userAgent","IS_SAFARI","search","toLowerCase","indexOf","test","vendor","platform","maxTouchPoints","match","IS_FIREFOX","bigIntFromBytes","bytes","base","Uint8Array","bigIntToBytes","bigInt","toArray","value","bytesModPow","exp","mod","bytesBigInt","expBigInt","modBigInt","modPow","readBigIntFromBytesBE","length","bits","and","shiftLeft","i","_bits","b","or","emojis","randomize","arr","crypto","Error","getRandomValues","addPadding","blockSize","zeroes","blockSizeAsTotalLength","prepend","len","byteLength","needPadding","padding","ArrayBuffer","bufferConcats","buffer","concat","bytesFromHex","hexString","Math","ceil","start","parseInt","charAt","substr","convertToUint8Array","TextEncoder","encode","S","Si","T1","Uint32Array","T2","T3","T4","T5","T6","T7","T8","getWords","key","buf","pos","str","charCodeAt","xor","left","right","to","x2","x4","s","tEnc","tDec","d","t","x","xInv","computeTables","AES","_key","this","encKey","decKey","set","tmp","rcon","j","prototype","encrypt","_message","a2","b2","c2","message","out","a","c","rounds","k","decrypt","AES_IGE","iv","cipher","text","cipherText","prevX","subarray","prevY","yXOR","y","bytesToWordss","input","words","aesSync","keyBytes","ivBytes","o","bytesFromWordss","counter","offset","incrementCounter","carry","arrays","Uint16Array","bigIntRandom","min","max","array","nextRandomUint","BrentPollardFactor","n","two","remainder","isZero","m","ys","r","q","g","minus","eq","bigIntUint64MinusPqPlusOne","plus","performY","pow","add","lesser","condition","multiply","greater","abs","window","subtle","self","CTR","constructor","mode","cryptoKey","queue","update","data","Promise","resolve","push","release","releasing","shift","_update","perform","name","head","tail","toEncrypt","leftLength","leftLength2","slice","performed","result","leftAfter","undefined","aesCTRs","Map","lastCTRId","console","log","cryptoMethods","then","salt","iterations","importKey","hash","publicKey","exponent","modulus","pqBytes","factors","primes","factor","divide","pop","isPrime","primeFactors","sort","compare","splice","reduce","acc","v","p","map","toString","password","state","isNew","algo","new_algo","current_algo","pw_hash","client_salt","server_salt","makePasswordHash","salt1","salt2","Array","join","bytesToHex","padArray","flipper","B","srp_B","pForHash","gForHash","b_for_hash","k_v","is_good_mod_exp_first","modexp","prime","diff","subtract","isNegative","bitLength","toJSNumber","floor","a_for_hash","u","secure_random","A","generate_and_check_random","g_b","ux","a_ux","K","h1","bytes1","bytes2","bytesXor","buff","M1","_","srp_id","dhConfig","aBigInt","pBigInt","generateA","gBytes","g_a","g_a_hash","key_fingerprint","reverse","emojisLength","partOffset","index","codePoints","encIv","decIv","id","promises","encCryptoKey","decCryptoKey","all","enc","dec","operation","ctrs","get","delete","cryptoMessagePort","method","args","messagePort","onConnect","onDisconnect","attachPort","ctx","e","source","listenMessagePort","channel","MessageChannel","port1","port2","LogTypes","LOG_LEVELS","None","Warn","Log","Debug","STYLES_SUPPORTED","LOGGER_STYLES","methods","logger","prefix","type","ignoreDebugReset","style","originalPrefix","originalStyle","forEach","logType","setPrefix","newPrefix","setLevel","level","bindPrefix","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","call","__webpack_exports__","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","Object","keys","every","getter","__esModule","definition","defineProperty","enumerable","f","chunkId","miniCssF","globalThis","Function","obj","prop","hasOwnProperty","nmd","paths","children","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","replace","has","catch","error","retries","realSrc","request","setTimeout","cacheBust","Date","now","installedChunks","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime"],"sourceRoot":""}