{"version":3,"file":"9453.315ab9492b8da748cb85.js","mappings":"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","sources":["webpack://telegram-t/./src/components/common/Avatar.tsx","webpack://telegram-t/./src/components/ui/InfiniteScroll.tsx","webpack://telegram-t/./src/components/ui/Modal.tsx","webpack://telegram-t/./src/util/trapFocus.ts","webpack://telegram-t/./src/components/ui/Portal.ts","webpack://telegram-t/./src/hooks/useInfiniteScroll.ts","webpack://telegram-t/./src/hooks/useInterval.ts","webpack://telegram-t/./src/hooks/useMedia.ts","webpack://telegram-t/./src/util/resetScroll.ts","webpack://telegram-t/./src/util/safePlay.ts"],"sourcesContent":["import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC, TeactNode } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiPhoto, ApiUser, ApiUserStatus,\n} from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TEST } from '../../config';\nimport {\n  getChatAvatarHash,\n  getChatTitle,\n  getUserColorKey,\n  getUserFullName,\n  isUserId,\n  isChatWithRepliesBot,\n  isDeletedUser,\n  isUserOnline,\n} from '../../global/helpers';\nimport { getFirstLetters } from '../../util/textFormat';\nimport buildClassName, { createClassNameBuilder } from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport './Avatar.scss';\n\nconst cn = createClassNameBuilder('Avatar');\ncn.img = cn('img');\ncn.icon = cn('icon');\n\ntype OwnProps = {\n  className?: string;\n  size?: 'micro' | 'tiny' | 'small' | 'medium' | 'large' | 'jumbo';\n  chat?: ApiChat;\n  user?: ApiUser;\n  photo?: ApiPhoto;\n  userStatus?: ApiUserStatus;\n  text?: string;\n  isSavedMessages?: boolean;\n  lastSyncTime?: number;\n  onClick?: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>, hasPhoto: boolean) => void;\n};\n\nconst Avatar: FC<OwnProps> = ({\n  className,\n  size = 'large',\n  chat,\n  user,\n  photo,\n  userStatus,\n  text,\n  isSavedMessages,\n  lastSyncTime,\n  onClick,\n}) => {\n  const isDeleted = user && isDeletedUser(user);\n  const isReplies = user && isChatWithRepliesBot(user.id);\n  let imageHash: string | undefined;\n\n  const shouldFetchBig = size === 'jumbo';\n  if (!isSavedMessages && !isDeleted) {\n    if (user) {\n      imageHash = getChatAvatarHash(user, shouldFetchBig ? 'big' : undefined);\n    } else if (chat) {\n      imageHash = getChatAvatarHash(chat, shouldFetchBig ? 'big' : undefined);\n    } else if (photo) {\n      imageHash = `photo${photo.id}?size=m`;\n    }\n  }\n\n  const blobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl, lastSyncTime);\n  const hasBlobUrl = Boolean(blobUrl);\n  const { transitionClassNames } = useShowTransition(hasBlobUrl, undefined, hasBlobUrl, 'slow');\n\n  const lang = useLang();\n\n  let content: TeactNode | undefined;\n  const author = user ? getUserFullName(user) : (chat ? getChatTitle(lang, chat) : text);\n\n  if (isSavedMessages) {\n    content = <i className={buildClassName(cn.icon, 'icon-avatar-saved-messages')} aria-label={author} />;\n  } else if (isDeleted) {\n    content = <i className={buildClassName(cn.icon, 'icon-avatar-deleted-account')} aria-label={author} />;\n  } else if (isReplies) {\n    content = <i className={buildClassName(cn.icon, 'icon-reply-filled')} aria-label={author} />;\n  } else if (blobUrl) {\n    content = (\n      <img\n        src={blobUrl}\n        className={buildClassName(cn.img, 'avatar-media', transitionClassNames)}\n        alt={author}\n        decoding=\"async\"\n      />\n    );\n  } else if (user) {\n    const userFullName = getUserFullName(user);\n    content = userFullName ? getFirstLetters(userFullName, 2) : undefined;\n  } else if (chat) {\n    const title = getChatTitle(lang, chat);\n    content = title && getFirstLetters(title, isUserId(chat.id) ? 2 : 1);\n  } else if (text) {\n    content = getFirstLetters(text, 2);\n  }\n\n  const isOnline = !isSavedMessages && user && userStatus && isUserOnline(user, userStatus);\n  const fullClassName = buildClassName(\n    `Avatar size-${size}`,\n    className,\n    `color-bg-${getUserColorKey(user || chat)}`,\n    isSavedMessages && 'saved-messages',\n    isDeleted && 'deleted-account',\n    isReplies && 'replies-bot-account',\n    isOnline && 'online',\n    onClick && 'interactive',\n    (!isSavedMessages && !blobUrl) && 'no-photo',\n  );\n\n  const hasImage = Boolean(isSavedMessages || blobUrl);\n  const handleClick = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (onClick) {\n      onClick(e, hasImage);\n    }\n  }, [onClick, hasImage]);\n\n  const senderId = (user || chat) && (user || chat)!.id;\n\n  return (\n    <div\n      className={fullClassName}\n      onClick={handleClick}\n      data-test-sender-id={IS_TEST ? senderId : undefined}\n      aria-label={typeof content === 'string' ? author : undefined}\n    >\n      {typeof content === 'string' ? renderText(content, [size === 'jumbo' ? 'hq_emoji' : 'emoji']) : content}\n    </div>\n  );\n};\n\nexport default memo(Avatar);\n","import type { RefObject, UIEvent } from 'react';\nimport { LoadMoreDirection } from '../../types';\n\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useLayoutEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport resetScroll from '../../util/resetScroll';\nimport { IS_ANDROID } from '../../util/environment';\nimport buildStyle from '../../util/buildStyle';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLDivElement>;\n  className?: string;\n  onLoadMore?: ({ direction }: { direction: LoadMoreDirection; noScroll?: boolean }) => void;\n  onScroll?: (e: UIEvent<HTMLDivElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<any>) => void;\n  items?: any[];\n  itemSelector?: string;\n  preloadBackwards?: number;\n  sensitiveArea?: number;\n  withAbsolutePositioning?: boolean;\n  maxHeight?: number;\n  noScrollRestore?: boolean;\n  noScrollRestoreOnTop?: boolean;\n  noFastList?: boolean;\n  cacheBuster?: any;\n  children: React.ReactNode;\n};\n\nconst DEFAULT_LIST_SELECTOR = '.ListItem';\nconst DEFAULT_PRELOAD_BACKWARDS = 20;\nconst DEFAULT_SENSITIVE_AREA = 800;\n\nconst InfiniteScroll: FC<OwnProps> = ({\n  ref,\n  className,\n  onLoadMore,\n  onScroll,\n  onKeyDown,\n  items,\n  itemSelector = DEFAULT_LIST_SELECTOR,\n  preloadBackwards = DEFAULT_PRELOAD_BACKWARDS,\n  sensitiveArea = DEFAULT_SENSITIVE_AREA,\n  withAbsolutePositioning,\n  maxHeight,\n  // Used to turn off restoring scroll position (e.g. for frequently re-ordered chat or user lists)\n  noScrollRestore = false,\n  noScrollRestoreOnTop = false,\n  noFastList,\n  // Used to re-query `listItemElements` if rendering is delayed by transition\n  cacheBuster,\n  children,\n}: OwnProps) => {\n  // eslint-disable-next-line no-null/no-null\n  let containerRef = useRef<HTMLDivElement>(null);\n  if (ref) {\n    containerRef = ref;\n  }\n\n  const stateRef = useRef<{\n    listItemElements?: NodeListOf<HTMLDivElement>;\n    isScrollTopJustUpdated?: boolean;\n    currentAnchor?: HTMLDivElement | undefined;\n    currentAnchorTop?: number;\n  }>({});\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(() => {\n    if (!onLoadMore) {\n      return [];\n    }\n\n    return [\n      debounce((noScroll = false) => {\n        onLoadMore({ direction: LoadMoreDirection.Backwards, noScroll });\n      }, 1000, true, false),\n      debounce(() => {\n        onLoadMore({ direction: LoadMoreDirection.Forwards });\n      }, 1000, true, false),\n    ];\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [onLoadMore, items]);\n\n  // Initial preload\n  useEffect(() => {\n    if (!loadMoreBackwards) {\n      return;\n    }\n\n    if (preloadBackwards > 0 && (!items || items.length < preloadBackwards)) {\n      loadMoreBackwards(true);\n      return;\n    }\n\n    const { scrollHeight, clientHeight } = containerRef.current!;\n    if (clientHeight && scrollHeight <= clientHeight) {\n      loadMoreBackwards();\n    }\n  }, [items, loadMoreBackwards, preloadBackwards]);\n\n  // Restore `scrollTop` after adding items\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    const state = stateRef.current;\n\n    state.listItemElements = container.querySelectorAll<HTMLDivElement>(itemSelector);\n\n    let newScrollTop;\n\n    if (state.currentAnchor && Array.from(state.listItemElements).includes(state.currentAnchor)) {\n      const { scrollTop } = container;\n      const newAnchorTop = state.currentAnchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - state.currentAnchorTop!);\n    } else {\n      const nextAnchor = state.listItemElements[0];\n      if (nextAnchor) {\n        state.currentAnchor = nextAnchor;\n        state.currentAnchorTop = nextAnchor.getBoundingClientRect().top;\n      }\n    }\n\n    if (withAbsolutePositioning || noScrollRestore) {\n      return;\n    }\n\n    if (noScrollRestoreOnTop && container.scrollTop === 0) {\n      return;\n    }\n\n    resetScroll(container, newScrollTop);\n\n    state.isScrollTopJustUpdated = true;\n  }, [items, itemSelector, noScrollRestore, noScrollRestoreOnTop, cacheBuster, withAbsolutePositioning]);\n\n  const handleScroll = useCallback((e: UIEvent<HTMLDivElement>) => {\n    if (loadMoreForwards && loadMoreBackwards) {\n      const {\n        isScrollTopJustUpdated, currentAnchor, currentAnchorTop,\n      } = stateRef.current;\n      const listItemElements = stateRef.current.listItemElements!;\n\n      if (isScrollTopJustUpdated) {\n        stateRef.current.isScrollTopJustUpdated = false;\n        return;\n      }\n\n      const listLength = listItemElements.length;\n      const container = containerRef.current!;\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const top = listLength ? listItemElements[0].offsetTop : 0;\n      const isNearTop = scrollTop <= top + sensitiveArea;\n      const bottom = listLength\n        ? listItemElements[listLength - 1].offsetTop + listItemElements[listLength - 1].offsetHeight\n        : scrollHeight;\n      const isNearBottom = bottom - (scrollTop + offsetHeight) <= sensitiveArea;\n      let isUpdated = false;\n\n      if (isNearTop) {\n        const nextAnchor = listItemElements[0];\n        if (nextAnchor) {\n          const nextAnchorTop = nextAnchor.getBoundingClientRect().top;\n          const newAnchorTop = currentAnchor?.offsetParent && currentAnchor !== nextAnchor\n            ? currentAnchor.getBoundingClientRect().top\n            : nextAnchorTop;\n          const isMovingUp = (\n            currentAnchor && currentAnchorTop !== undefined && newAnchorTop > currentAnchorTop\n          );\n\n          if (isMovingUp) {\n            stateRef.current.currentAnchor = nextAnchor;\n            stateRef.current.currentAnchorTop = nextAnchorTop;\n            isUpdated = true;\n            loadMoreForwards();\n          }\n        }\n      }\n\n      if (isNearBottom) {\n        const nextAnchor = listItemElements[listLength - 1];\n        if (nextAnchor) {\n          const nextAnchorTop = nextAnchor.getBoundingClientRect().top;\n          const newAnchorTop = currentAnchor?.offsetParent && currentAnchor !== nextAnchor\n            ? currentAnchor.getBoundingClientRect().top\n            : nextAnchorTop;\n          const isMovingDown = (\n            currentAnchor && currentAnchorTop !== undefined && newAnchorTop < currentAnchorTop\n          );\n\n          if (isMovingDown) {\n            stateRef.current.currentAnchor = nextAnchor;\n            stateRef.current.currentAnchorTop = nextAnchorTop;\n            isUpdated = true;\n            loadMoreBackwards();\n          }\n        }\n      }\n\n      if (!isUpdated) {\n        if (currentAnchor?.offsetParent) {\n          stateRef.current.currentAnchorTop = currentAnchor.getBoundingClientRect().top;\n        } else {\n          const nextAnchor = listItemElements[0];\n\n          if (nextAnchor) {\n            stateRef.current.currentAnchor = nextAnchor;\n            stateRef.current.currentAnchorTop = nextAnchor.getBoundingClientRect().top;\n          }\n        }\n      }\n    }\n\n    if (onScroll) {\n      onScroll(e);\n    }\n  }, [loadMoreBackwards, loadMoreForwards, onScroll, sensitiveArea]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      teactFastList={!noFastList && !withAbsolutePositioning}\n      onKeyDown={onKeyDown}\n    >\n      {withAbsolutePositioning && items?.length ? (\n        <div\n          teactFastList={!noFastList}\n          style={buildStyle('position: relative', IS_ANDROID && `height: ${maxHeight}px`)}\n        >\n          {children}\n        </div>\n      ) : children}\n    </div>\n  );\n};\n\nexport default InfiniteScroll;\n","import type { RefObject } from 'react';\nimport type { FC, TeactNode } from '../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport trapFocus from '../../util/trapFocus';\nimport buildClassName from '../../util/buildClassName';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from './Button';\nimport Portal from './Portal';\n\nimport './Modal.scss';\n\nconst ANIMATION_DURATION = 200;\n\ntype OwnProps = {\n  title?: string | TextPart[];\n  className?: string;\n  isOpen?: boolean;\n  header?: TeactNode;\n  hasCloseButton?: boolean;\n  noBackdrop?: boolean;\n  children: React.ReactNode;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onEnter?: () => void;\n  dialogRef?: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst Modal: FC<OwnProps & StateProps> = ({\n  dialogRef,\n  title,\n  className,\n  isOpen,\n  header,\n  hasCloseButton,\n  noBackdrop,\n  children,\n  onClose,\n  onCloseAnimationEnd,\n  onEnter,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    shouldRender,\n    transitionClassNames,\n  } = useShowTransition(\n    isOpen, onCloseAnimationEnd, shouldSkipHistoryAnimations, undefined, shouldSkipHistoryAnimations,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const modalRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => (isOpen\n    ? captureKeyboardListeners({ onEsc: onClose, onEnter })\n    : undefined), [isOpen, onClose, onEnter]);\n  useEffect(() => (isOpen && modalRef.current ? trapFocus(modalRef.current) : undefined), [isOpen]);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n  });\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    document.body.classList.toggle('has-open-dialog', isOpen);\n    if (isOpen || (!isOpen && prevIsOpen !== undefined)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION);\n    }\n\n    return () => {\n      document.body.classList.remove('has-open-dialog');\n    };\n  }, [isOpen]);\n\n  const lang = useLang();\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    if (header) {\n      return header;\n    }\n\n    if (!title) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        {hasCloseButton && (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <div className=\"modal-title\">{title}</div>\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'Modal',\n    className,\n    transitionClassNames,\n    noBackdrop && 'transparent-backdrop',\n  );\n\n  return (\n    <Portal>\n      <div\n        ref={modalRef}\n        className={fullClassName}\n        tabIndex={-1}\n        role=\"dialog\"\n      >\n        <div className=\"modal-container\">\n          <div className=\"modal-backdrop\" onClick={onClose} />\n          <div className=\"modal-dialog\" ref={dialogRef}>\n            {renderHeader()}\n            <div className=\"modal-content custom-scroll\">\n              {children}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Portal>\n  );\n};\n\nexport default Modal;\n","export default function trapFocus(element: HTMLElement) {\n  function handleKeyDown(e: KeyboardEvent) {\n    if (e.key !== 'Tab') {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    const focusableElements = Array.from(\n      element.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'),\n    ) as HTMLElement[];\n    if (!focusableElements.length) {\n      return;\n    }\n\n    const currentFocusedIndex = focusableElements.findIndex((em) => em.isSameNode(document.activeElement));\n    let newFocusedIndex = 0;\n    if (currentFocusedIndex >= 0) {\n      if (e.shiftKey) {\n        newFocusedIndex = currentFocusedIndex > 0\n          ? currentFocusedIndex - 1\n          : focusableElements.length - 1;\n      } else {\n        newFocusedIndex = currentFocusedIndex < focusableElements.length - 1\n          ? currentFocusedIndex + 1\n          : 0;\n      }\n    }\n\n    focusableElements[newFocusedIndex].focus();\n  }\n\n  document.addEventListener('keydown', handleKeyDown, false);\n\n  return () => {\n    document.removeEventListener('keydown', handleKeyDown, false);\n  };\n}\n","import type { FC, VirtualElement } from '../../lib/teact/teact';\nimport { useRef, useLayoutEffect } from '../../lib/teact/teact';\nimport TeactDOM from '../../lib/teact/teact-dom';\n\ntype OwnProps = {\n  containerId?: string;\n  className?: string;\n  children: VirtualElement;\n};\n\nconst Portal: FC<OwnProps> = ({ containerId, className, children }) => {\n  const elementRef = useRef<HTMLDivElement>();\n  if (!elementRef.current) {\n    elementRef.current = document.createElement('div');\n  }\n\n  useLayoutEffect(() => {\n    const container = document.querySelector<HTMLDivElement>(containerId || '#portals');\n    if (!container) {\n      return undefined;\n    }\n\n    const element = elementRef.current!;\n    if (className) {\n      element.classList.add(className);\n    }\n\n    container.appendChild(element);\n\n    return () => {\n      TeactDOM.render(undefined, element);\n      container.removeChild(element);\n    };\n  }, [className, containerId]);\n\n  return TeactDOM.render(children, elementRef.current);\n};\n\nexport default Portal;\n","import { useCallback, useRef } from '../lib/teact/teact';\nimport { LoadMoreDirection } from '../types';\n\nimport { areSortedArraysEqual } from '../util/iteratees';\nimport useForceUpdate from './useForceUpdate';\nimport usePrevious from './usePrevious';\n\ntype GetMore = (args: { direction: LoadMoreDirection }) => void;\ntype LoadMoreBackwards = (args: { offsetId?: string | number }) => void;\n\nconst DEFAULT_LIST_SLICE = 30;\n\nconst useInfiniteScroll = <ListId extends string | number>(\n  loadMoreBackwards?: LoadMoreBackwards,\n  listIds?: ListId[],\n  isDisabled = false,\n  listSlice = DEFAULT_LIST_SLICE,\n): [ListId[]?, GetMore?] => {\n  const lastParamsRef = useRef<{\n    direction?: LoadMoreDirection;\n    offsetId?: ListId;\n  }>();\n\n  const viewportIdsRef = useRef<ListId[] | undefined>((() => {\n    // Only run once to initialize\n    if (!listIds || lastParamsRef.current) {\n      return undefined;\n    }\n\n    const { newViewportIds } = getViewportSlice(listIds, LoadMoreDirection.Forwards, listSlice, listIds[0]);\n    return newViewportIds;\n  })());\n\n  const forceUpdate = useForceUpdate();\n\n  if (isDisabled) {\n    lastParamsRef.current = {};\n  }\n\n  const prevListIds = usePrevious(listIds);\n  const prevIsDisabled = usePrevious(isDisabled);\n  if (listIds && !isDisabled && (listIds !== prevListIds || isDisabled !== prevIsDisabled)) {\n    const { offsetId = listIds[0], direction = LoadMoreDirection.Forwards } = lastParamsRef.current || {};\n    const { newViewportIds } = getViewportSlice(listIds, direction, listSlice, offsetId);\n\n    if (!viewportIdsRef.current || !areSortedArraysEqual(viewportIdsRef.current, newViewportIds)) {\n      viewportIdsRef.current = newViewportIds;\n    }\n  } else if (!listIds) {\n    viewportIdsRef.current = undefined;\n  }\n\n  const getMore: GetMore = useCallback(({\n    direction,\n    noScroll,\n  }: { direction: LoadMoreDirection; noScroll?: boolean }) => {\n    const viewportIds = viewportIdsRef.current;\n\n    const offsetId = viewportIds\n      ? direction === LoadMoreDirection.Backwards ? viewportIds[viewportIds.length - 1] : viewportIds[0]\n      : undefined;\n\n    if (!listIds) {\n      if (loadMoreBackwards) {\n        loadMoreBackwards({ offsetId });\n      }\n\n      return;\n    }\n\n    if (!noScroll) {\n      lastParamsRef.current = { ...lastParamsRef.current, direction, offsetId };\n    }\n\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(listIds, direction, listSlice, offsetId);\n\n    if (areSomeLocal && !(viewportIds && areSortedArraysEqual(viewportIds, newViewportIds))) {\n      viewportIdsRef.current = newViewportIds;\n      forceUpdate();\n    }\n\n    if (!areAllLocal && loadMoreBackwards) {\n      loadMoreBackwards({ offsetId });\n    }\n  }, [listIds, listSlice, loadMoreBackwards, forceUpdate]);\n\n  return isDisabled ? [listIds] : [viewportIdsRef.current, getMore];\n};\n\nfunction getViewportSlice<ListId extends string | number>(\n  sourceIds: ListId[],\n  direction: LoadMoreDirection,\n  listSlice: number,\n  offsetId?: ListId,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? sourceIds.indexOf(offsetId) : 0;\n  const isForwards = direction === LoadMoreDirection.Forwards;\n  const indexForDirection = isForwards ? index : (index + 1) || length;\n  const from = Math.max(0, indexForDirection - listSlice);\n  const to = indexForDirection + listSlice - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport default useInfiniteScroll;\n","import { useEffect, useLayoutEffect, useRef } from '../lib/teact/teact';\n\nfunction useInterval(callback: NoneToVoidFunction, delay?: number, noFirst = false) {\n  const savedCallback = useRef(callback);\n\n  useLayoutEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay === undefined) {\n      return undefined;\n    }\n\n    const id = setInterval(() => savedCallback.current(), delay);\n    if (!noFirst) savedCallback.current();\n\n    return () => clearInterval(id);\n  }, [delay, noFirst]);\n}\n\nexport default useInterval;\n","import { useEffect } from '../lib/teact/teact';\n\nimport { ApiMediaFormat } from '../api/types';\n\nimport * as mediaLoader from '../util/mediaLoader';\nimport useForceUpdate from './useForceUpdate';\n\nconst useMedia = (\n  mediaHash: string | false | undefined,\n  noLoad = false,\n  mediaFormat = ApiMediaFormat.BlobUrl,\n  cacheBuster?: number,\n  delay?: number | false,\n) => {\n  const mediaData = mediaHash ? mediaLoader.getFromMemory(mediaHash) : undefined;\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (!noLoad && mediaHash && !mediaData) {\n      const startedAt = Date.now();\n\n      mediaLoader.fetch(mediaHash, mediaFormat).then(() => {\n        const spentTime = Date.now() - startedAt;\n        if (!delay || spentTime >= delay) {\n          forceUpdate();\n        } else {\n          setTimeout(forceUpdate, delay - spentTime);\n        }\n      });\n    }\n  }, [noLoad, mediaHash, mediaData, mediaFormat, cacheBuster, forceUpdate, delay]);\n\n  return mediaData;\n};\n\nexport default useMedia;\n","import { IS_IOS } from './environment';\nimport forceReflow from './forceReflow';\n\nconst resetScroll = (container: HTMLDivElement, scrollTop?: number) => {\n  if (IS_IOS) {\n    container.style.overflow = 'hidden';\n  }\n\n  if (scrollTop !== undefined) {\n    container.scrollTop = scrollTop;\n  }\n\n  if (IS_IOS) {\n    container.style.overflow = '';\n  }\n};\n\n// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1264266\nexport function patchChromiumScroll(element: HTMLElement) {\n  element.style.display = 'none';\n  forceReflow(element);\n  element.style.display = '';\n}\n\nexport default resetScroll;\n","import { DEBUG } from '../config';\n\nconst safePlay = (mediaEl: HTMLMediaElement) => {\n  mediaEl.play().catch((err) => {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn(err, mediaEl);\n    }\n  });\n};\n\nexport default safePlay;\n"],"names":["cn","createClassNameBuilder","img","icon","memo","className","size","chat","user","photo","userStatus","text","isSavedMessages","lastSyncTime","onClick","isDeleted","isDeletedUser","isReplies","isChatWithRepliesBot","id","imageHash","shouldFetchBig","getChatAvatarHash","undefined","blobUrl","useMedia","ApiMediaFormat","hasBlobUrl","Boolean","transitionClassNames","useShowTransition","lang","useLang","content","author","getUserFullName","getChatTitle","buildClassName","src","alt","decoding","userFullName","getFirstLetters","title","isUserId","isOnline","isUserOnline","fullClassName","getUserColorKey","hasImage","handleClick","useCallback","e","senderId","IS_TEST","renderText","DEFAULT_LIST_SELECTOR","DEFAULT_PRELOAD_BACKWARDS","DEFAULT_SENSITIVE_AREA","ref","onLoadMore","onScroll","onKeyDown","items","itemSelector","preloadBackwards","sensitiveArea","withAbsolutePositioning","maxHeight","noScrollRestore","noScrollRestoreOnTop","noFastList","cacheBuster","children","containerRef","useRef","stateRef","loadMoreBackwards","loadMoreForwards","useMemo","debounce","noScroll","direction","LoadMoreDirection","useEffect","length","scrollHeight","clientHeight","current","useLayoutEffect","container","state","newScrollTop","listItemElements","querySelectorAll","currentAnchor","Array","from","includes","scrollTop","getBoundingClientRect","top","currentAnchorTop","nextAnchor","resetScroll","isScrollTopJustUpdated","handleScroll","listLength","offsetHeight","isNearTop","offsetTop","isNearBottom","isUpdated","nextAnchorTop","newAnchorTop","offsetParent","teactFastList","style","buildStyle","IS_ANDROID","dialogRef","isOpen","header","hasCloseButton","noBackdrop","onClose","onCloseAnimationEnd","onEnter","shouldSkipHistoryAnimations","shouldRender","modalRef","captureKeyboardListeners","onEsc","element","handleKeyDown","key","preventDefault","stopPropagation","focusableElements","currentFocusedIndex","findIndex","em","isSameNode","document","activeElement","newFocusedIndex","shiftKey","focus","addEventListener","removeEventListener","trapFocus","useHistoryBack","isActive","onBack","useEffectWithPrevDeps","prevIsOpen","body","classList","toggle","dispatchHeavyAnimationEvent","remove","Portal","tabIndex","role","Button","round","color","ariaLabel","containerId","elementRef","createElement","querySelector","add","appendChild","TeactDOM","removeChild","getViewportSlice","sourceIds","listSlice","offsetId","index","indexOf","indexForDirection","Math","max","to","newViewportIds","slice","areSomeLocal","areAllLocal","listIds","isDisabled","lastParamsRef","viewportIdsRef","forceUpdate","useForceUpdate","prevListIds","usePrevious","prevIsDisabled","areSortedArraysEqual","getMore","viewportIds","callback","delay","noFirst","savedCallback","setInterval","clearInterval","mediaHash","noLoad","mediaFormat","mediaData","mediaLoader","startedAt","Date","now","then","spentTime","setTimeout","patchChromiumScroll","display","forceReflow","IS_IOS","overflow","mediaEl","play","catch","err","DEBUG","console","warn"],"sourceRoot":""}